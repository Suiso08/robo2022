
shoot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800519c  0800519c  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a4  080051a4  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  080051b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000019c  0800534c  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800534c  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d54  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249a  00000000  00000000  00032f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000353c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00036338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dcf  00000000  00000000  000371f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001386d  00000000  00000000  0005bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5748  00000000  00000000  0006f82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  00144fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005108 	.word	0x08005108

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	08005108 	.word	0x08005108

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_ZN7EncoderC1EP17TIM_HandleTypeDefP11TIM_TypeDef>:
#include "Encoder.hpp"
#include "main.h"

Encoder::Encoder(TIM_HandleTypeDef *htim, TIM_TypeDef *ttim): phtim(htim), pttim(ttim){;}
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(phtim, TIM_CHANNEL_ALL);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	213c      	movs	r1, #60	; 0x3c
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fde7 	bl	80031bc <HAL_TIM_Encoder_Start>
	//HAL_TIM_Base_Start_IT(tim_name);
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_ZN7Encoder5resetEv>:

void Encoder::reset()
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	pttim->CNT = 0;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
	count = 0;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	815a      	strh	r2, [r3, #10]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	buffer = pttim->CNT;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000626:	b29a      	uxth	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	811a      	strh	r2, [r3, #8]
	pttim->CNT = 0;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
	count += buffer;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	891b      	ldrh	r3, [r3, #8]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	b21a      	sxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	815a      	strh	r2, [r3, #10]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_ZN7Encoder7getdiffEv>:

int16_t Encoder::getdiff()
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return buffer;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	891b      	ldrh	r3, [r3, #8]
 8000662:	b21b      	sxth	r3, r3
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_ZN7Encoder8getcountEv>:

int16_t Encoder::getcount()
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	return count;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <_ZN5MotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeft>:
#include "Motor.hpp"
#include "main.h"
#include "stdlib.h"

Motor::Motor(TIM_HandleTypeDef *htim, uint16_t TIM_CHANNEL, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin):
 800068a:	b480      	push	{r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
        tim_name(htim), tim_channel(TIM_CHANNEL), gpio_name(GPIOx), gpio_pin(GPIO_Pin){;}
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	88fa      	ldrh	r2, [r7, #6]
 80006a4:	809a      	strh	r2, [r3, #4]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	8b3a      	ldrh	r2, [r7, #24]
 80006b0:	819a      	strh	r2, [r3, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <_ZN5Motor4initEv>:

void Motor::init()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if (HAL_TIM_PWM_Start(tim_name, tim_channel) != HAL_OK) { Error_Handler(); }
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4610      	mov	r0, r2
 80006d4:	f002 fc04 	bl	8002ee0 <HAL_TIM_PWM_Start>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <_ZN5Motor4initEv+0x2c>
 80006e8:	f000 fda8 	bl	800123c <Error_Handler>

	__HAL_TIM_SET_COMPARE(tim_name, tim_channel, 0);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d105      	bne.n	8000700 <_ZN5Motor4initEv+0x40>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
 80006fe:	e018      	b.n	8000732 <_ZN5Motor4initEv+0x72>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d105      	bne.n	8000714 <_ZN5Motor4initEv+0x54>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2200      	movs	r2, #0
 8000710:	639a      	str	r2, [r3, #56]	; 0x38
 8000712:	e00e      	b.n	8000732 <_ZN5Motor4initEv+0x72>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	889b      	ldrh	r3, [r3, #4]
 8000718:	2b08      	cmp	r3, #8
 800071a:	d105      	bne.n	8000728 <_ZN5Motor4initEv+0x68>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	63da      	str	r2, [r3, #60]	; 0x3c
 8000726:	e004      	b.n	8000732 <_ZN5Motor4initEv+0x72>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2200      	movs	r2, #0
 8000730:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(gpio_name, gpio_pin, GPIO_PIN_RESET);//初期化の後にピンの設定をする
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6898      	ldr	r0, [r3, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	f001 fbe1 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <_ZN5Motor5speedEf>:

void Motor::speed(float speed)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	ed87 0a00 	vstr	s0, [r7]
	if(speed == 0)
 8000758:	edd7 7a00 	vldr	s15, [r7]
 800075c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000764:	d123      	bne.n	80007ae <_ZN5Motor5speedEf+0x62>
	{
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, 0);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	889b      	ldrh	r3, [r3, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d105      	bne.n	800077a <_ZN5Motor5speedEf+0x2e>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(gpio_name, gpio_pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(gpio_name, gpio_pin, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, abs((int)(speed * 19999)));
	}
}
 8000778:	e088      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, 0);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	889b      	ldrh	r3, [r3, #4]
 800077e:	2b04      	cmp	r3, #4
 8000780:	d105      	bne.n	800078e <_ZN5Motor5speedEf+0x42>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2200      	movs	r2, #0
 800078a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800078c:	e07e      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, 0);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	889b      	ldrh	r3, [r3, #4]
 8000792:	2b08      	cmp	r3, #8
 8000794:	d105      	bne.n	80007a2 <_ZN5Motor5speedEf+0x56>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007a0:	e074      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, 0);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007ac:	e06e      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		if(speed < 0.0)
 80007ae:	edd7 7a00 	vldr	s15, [r7]
 80007b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ba:	d508      	bpl.n	80007ce <_ZN5Motor5speedEf+0x82>
			HAL_GPIO_WritePin(gpio_name, gpio_pin, GPIO_PIN_SET);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6898      	ldr	r0, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	899b      	ldrh	r3, [r3, #12]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f001 fb9c 	bl	8001f04 <HAL_GPIO_WritePin>
 80007cc:	e007      	b.n	80007de <_ZN5Motor5speedEf+0x92>
			HAL_GPIO_WritePin(gpio_name, gpio_pin, GPIO_PIN_RESET);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6898      	ldr	r0, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	899b      	ldrh	r3, [r3, #12]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	f001 fb93 	bl	8001f04 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, abs((int)(speed * 19999)));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d112      	bne.n	800080c <_ZN5Motor5speedEf+0xc0>
 80007e6:	edd7 7a00 	vldr	s15, [r7]
 80007ea:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000894 <_ZN5Motor5speedEf+0x148>
 80007ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007f6:	ee17 3a90 	vmov	r3, s15
 80007fa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
}
 800080a:	e03f      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, abs((int)(speed * 19999)));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	889b      	ldrh	r3, [r3, #4]
 8000810:	2b04      	cmp	r3, #4
 8000812:	d112      	bne.n	800083a <_ZN5Motor5speedEf+0xee>
 8000814:	edd7 7a00 	vldr	s15, [r7]
 8000818:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000894 <_ZN5Motor5speedEf+0x148>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000824:	ee17 3a90 	vmov	r3, s15
 8000828:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800082c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000838:	e028      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, abs((int)(speed * 19999)));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	889b      	ldrh	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d112      	bne.n	8000868 <_ZN5Motor5speedEf+0x11c>
 8000842:	edd7 7a00 	vldr	s15, [r7]
 8000846:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000894 <_ZN5Motor5speedEf+0x148>
 800084a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000852:	ee17 3a90 	vmov	r3, s15
 8000856:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800085a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000866:	e011      	b.n	800088c <_ZN5Motor5speedEf+0x140>
		__HAL_TIM_SET_COMPARE(tim_name, tim_channel, abs((int)(speed * 19999)));
 8000868:	edd7 7a00 	vldr	s15, [r7]
 800086c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000894 <_ZN5Motor5speedEf+0x148>
 8000870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000878:	ee17 3a90 	vmov	r3, s15
 800087c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000880:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	469c3e00 	.word	0x469c3e00

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 fff5 	bl	800188c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f949 	bl	8000b38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 fc2d 	bl	8001104 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80008aa:	f000 fbfd 	bl	80010a8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80008ae:	f000 f9ef 	bl	8000c90 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80008b2:	f000 fadf 	bl	8000e74 <_ZL12MX_TIM2_Initv>
  MX_I2C1_Init();
 80008b6:	f000 f9b7 	bl	8000c28 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80008ba:	f000 fb39 	bl	8000f30 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 80008be:	f000 fb95 	bl	8000fec <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  motor1.init();
 80008c2:	4887      	ldr	r0, [pc, #540]	; (8000ae0 <main+0x248>)
 80008c4:	f7ff fefc 	bl	80006c0 <_ZN5Motor4initEv>
  motor2.init();
 80008c8:	4886      	ldr	r0, [pc, #536]	; (8000ae4 <main+0x24c>)
 80008ca:	f7ff fef9 	bl	80006c0 <_ZN5Motor4initEv>
  motor3.init();
 80008ce:	4886      	ldr	r0, [pc, #536]	; (8000ae8 <main+0x250>)
 80008d0:	f7ff fef6 	bl	80006c0 <_ZN5Motor4initEv>
  motor4.init();
 80008d4:	4885      	ldr	r0, [pc, #532]	; (8000aec <main+0x254>)
 80008d6:	f7ff fef3 	bl	80006c0 <_ZN5Motor4initEv>

enc1.init();
 80008da:	4885      	ldr	r0, [pc, #532]	; (8000af0 <main+0x258>)
 80008dc:	f7ff fe7d 	bl	80005da <_ZN7Encoder4initEv>
enc1.reset();
 80008e0:	4883      	ldr	r0, [pc, #524]	; (8000af0 <main+0x258>)
 80008e2:	f7ff fe88 	bl	80005f6 <_ZN7Encoder5resetEv>

enc2.init();
 80008e6:	4883      	ldr	r0, [pc, #524]	; (8000af4 <main+0x25c>)
 80008e8:	f7ff fe77 	bl	80005da <_ZN7Encoder4initEv>
enc2.reset();
 80008ec:	4881      	ldr	r0, [pc, #516]	; (8000af4 <main+0x25c>)
 80008ee:	f7ff fe82 	bl	80005f6 <_ZN7Encoder5resetEv>

enc3.init();
 80008f2:	4881      	ldr	r0, [pc, #516]	; (8000af8 <main+0x260>)
 80008f4:	f7ff fe71 	bl	80005da <_ZN7Encoder4initEv>
enc3.reset();
 80008f8:	487f      	ldr	r0, [pc, #508]	; (8000af8 <main+0x260>)
 80008fa:	f7ff fe7c 	bl	80005f6 <_ZN7Encoder5resetEv>

int delay = 1000;
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	60bb      	str	r3, [r7, #8]
int delaycnt = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //モーター制御
	  delayswitch = delaycnt % 4000;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4a7c      	ldr	r2, [pc, #496]	; (8000afc <main+0x264>)
 800090c:	fb82 1203 	smull	r1, r2, r2, r3
 8000910:	1211      	asrs	r1, r2, #8
 8000912:	17da      	asrs	r2, r3, #31
 8000914:	1a8a      	subs	r2, r1, r2
 8000916:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800091a:	fb01 f202 	mul.w	r2, r1, r2
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	607b      	str	r3, [r7, #4]
	  switch(delayswitch)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000928:	4293      	cmp	r3, r2
 800092a:	d053      	beq.n	80009d4 <main+0x13c>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000932:	4293      	cmp	r3, r2
 8000934:	dc63      	bgt.n	80009fe <main+0x166>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800093c:	d035      	beq.n	80009aa <main+0x112>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000944:	dc5b      	bgt.n	80009fe <main+0x166>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <main+0xbe>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000952:	d015      	beq.n	8000980 <main+0xe8>
	  	  				motor2.speed(0.0);
	  	  				motor3.speed(0.0);
	  	  				motor4.speed(0.0);

	  	  	  	  	    break;
	  default:break;
 8000954:	e053      	b.n	80009fe <main+0x166>
	  case 0:motor1.speed(0.5);
 8000956:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800095a:	4861      	ldr	r0, [pc, #388]	; (8000ae0 <main+0x248>)
 800095c:	f7ff fef6 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  motor2.speed(-0.5);
 8000960:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8000964:	485f      	ldr	r0, [pc, #380]	; (8000ae4 <main+0x24c>)
 8000966:	f7ff fef1 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  motor3.speed(0.5);
 800096a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800096e:	485e      	ldr	r0, [pc, #376]	; (8000ae8 <main+0x250>)
 8000970:	f7ff feec 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  motor4.speed(-0.5);
 8000974:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8000978:	485c      	ldr	r0, [pc, #368]	; (8000aec <main+0x254>)
 800097a:	f7ff fee7 	bl	800074c <_ZN5Motor5speedEf>
  	  	  	  	  break;
 800097e:	e03f      	b.n	8000a00 <main+0x168>
	  case 1000:motor1.speed(0.0);
 8000980:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8000b00 <main+0x268>
 8000984:	4856      	ldr	r0, [pc, #344]	; (8000ae0 <main+0x248>)
 8000986:	f7ff fee1 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	  	motor2.speed(0.0);
 800098a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8000b00 <main+0x268>
 800098e:	4855      	ldr	r0, [pc, #340]	; (8000ae4 <main+0x24c>)
 8000990:	f7ff fedc 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	  	motor3.speed(0.0);
 8000994:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8000b00 <main+0x268>
 8000998:	4853      	ldr	r0, [pc, #332]	; (8000ae8 <main+0x250>)
 800099a:	f7ff fed7 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	  	motor4.speed(0.0);
 800099e:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8000b00 <main+0x268>
 80009a2:	4852      	ldr	r0, [pc, #328]	; (8000aec <main+0x254>)
 80009a4:	f7ff fed2 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	  	break;
 80009a8:	e02a      	b.n	8000a00 <main+0x168>
	  case 2000:motor1.speed(-0.5);
 80009aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80009ae:	484c      	ldr	r0, [pc, #304]	; (8000ae0 <main+0x248>)
 80009b0:	f7ff fecc 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	    motor2.speed(0.5);
 80009b4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80009b8:	484a      	ldr	r0, [pc, #296]	; (8000ae4 <main+0x24c>)
 80009ba:	f7ff fec7 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	    motor3.speed(-0.5);
 80009be:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80009c2:	4849      	ldr	r0, [pc, #292]	; (8000ae8 <main+0x250>)
 80009c4:	f7ff fec2 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	    motor4.speed(0.5);
 80009c8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80009cc:	4847      	ldr	r0, [pc, #284]	; (8000aec <main+0x254>)
 80009ce:	f7ff febd 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	    break;
 80009d2:	e015      	b.n	8000a00 <main+0x168>
	  case 3000:motor1.speed(0.0);
 80009d4:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000b00 <main+0x268>
 80009d8:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <main+0x248>)
 80009da:	f7ff feb7 	bl	800074c <_ZN5Motor5speedEf>
	  	  				motor2.speed(0.0);
 80009de:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8000b00 <main+0x268>
 80009e2:	4840      	ldr	r0, [pc, #256]	; (8000ae4 <main+0x24c>)
 80009e4:	f7ff feb2 	bl	800074c <_ZN5Motor5speedEf>
	  	  				motor3.speed(0.0);
 80009e8:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8000b00 <main+0x268>
 80009ec:	483e      	ldr	r0, [pc, #248]	; (8000ae8 <main+0x250>)
 80009ee:	f7ff fead 	bl	800074c <_ZN5Motor5speedEf>
	  	  				motor4.speed(0.0);
 80009f2:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8000b00 <main+0x268>
 80009f6:	483d      	ldr	r0, [pc, #244]	; (8000aec <main+0x254>)
 80009f8:	f7ff fea8 	bl	800074c <_ZN5Motor5speedEf>
	  	  	  	  	    break;
 80009fc:	e000      	b.n	8000a00 <main+0x168>
	  default:break;
 80009fe:	bf00      	nop

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //エンコーダー読み取り
	  enc1.update();
 8000a00:	483b      	ldr	r0, [pc, #236]	; (8000af0 <main+0x258>)
 8000a02:	f7ff fe09 	bl	8000618 <_ZN7Encoder6updateEv>
	  getdiff1 = enc1.getdiff();
 8000a06:	483a      	ldr	r0, [pc, #232]	; (8000af0 <main+0x258>)
 8000a08:	f7ff fe25 	bl	8000656 <_ZN7Encoder7getdiffEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <main+0x26c>)
 8000a12:	801a      	strh	r2, [r3, #0]
	  getcount1 = enc1.getcount();
 8000a14:	4836      	ldr	r0, [pc, #216]	; (8000af0 <main+0x258>)
 8000a16:	f7ff fe2b 	bl	8000670 <_ZN7Encoder8getcountEv>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <main+0x270>)
 8000a20:	801a      	strh	r2, [r3, #0]
	  sprintf((char *)debug1, "enc1 -> %d %d\r\n", getdiff1, getcount1);
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <main+0x26c>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <main+0x270>)
 8000a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a30:	4936      	ldr	r1, [pc, #216]	; (8000b0c <main+0x274>)
 8000a32:	4837      	ldr	r0, [pc, #220]	; (8000b10 <main+0x278>)
 8000a34:	f003 fefa 	bl	800482c <siprintf>
	  //HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
	  HAL_UART_Transmit(&huart2, debug1, sizeof(debug1), 100);
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	2264      	movs	r2, #100	; 0x64
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <main+0x278>)
 8000a3e:	4835      	ldr	r0, [pc, #212]	; (8000b14 <main+0x27c>)
 8000a40:	f003 fb4d 	bl	80040de <HAL_UART_Transmit>

	  enc2.update();
 8000a44:	482b      	ldr	r0, [pc, #172]	; (8000af4 <main+0x25c>)
 8000a46:	f7ff fde7 	bl	8000618 <_ZN7Encoder6updateEv>
	  getdiff2 = enc2.getdiff();
 8000a4a:	482a      	ldr	r0, [pc, #168]	; (8000af4 <main+0x25c>)
 8000a4c:	f7ff fe03 	bl	8000656 <_ZN7Encoder7getdiffEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <main+0x280>)
 8000a56:	801a      	strh	r2, [r3, #0]
	  getcount2 = enc2.getcount();
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <main+0x25c>)
 8000a5a:	f7ff fe09 	bl	8000670 <_ZN7Encoder8getcountEv>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <main+0x284>)
 8000a64:	801a      	strh	r2, [r3, #0]
	  sprintf((char *)debug2, "enc2 -> %d %d\r\n", getdiff2, getcount2);
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <main+0x280>)
 8000a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <main+0x284>)
 8000a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a74:	492a      	ldr	r1, [pc, #168]	; (8000b20 <main+0x288>)
 8000a76:	482b      	ldr	r0, [pc, #172]	; (8000b24 <main+0x28c>)
 8000a78:	f003 fed8 	bl	800482c <siprintf>
	  //HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
	  HAL_UART_Transmit(&huart2, debug2, sizeof(debug2), 100);
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2264      	movs	r2, #100	; 0x64
 8000a80:	4928      	ldr	r1, [pc, #160]	; (8000b24 <main+0x28c>)
 8000a82:	4824      	ldr	r0, [pc, #144]	; (8000b14 <main+0x27c>)
 8000a84:	f003 fb2b 	bl	80040de <HAL_UART_Transmit>

	  enc3.update();
 8000a88:	481b      	ldr	r0, [pc, #108]	; (8000af8 <main+0x260>)
 8000a8a:	f7ff fdc5 	bl	8000618 <_ZN7Encoder6updateEv>
	  getdiff3 = enc3.getdiff();
 8000a8e:	481a      	ldr	r0, [pc, #104]	; (8000af8 <main+0x260>)
 8000a90:	f7ff fde1 	bl	8000656 <_ZN7Encoder7getdiffEv>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <main+0x290>)
 8000a9a:	801a      	strh	r2, [r3, #0]
	  getcount3 = enc3.getcount();
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <main+0x260>)
 8000a9e:	f7ff fde7 	bl	8000670 <_ZN7Encoder8getcountEv>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <main+0x294>)
 8000aa8:	801a      	strh	r2, [r3, #0]
	  sprintf((char *)debug3, "enc3 -> %d %d\r\n", getdiff3, getcount3);
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <main+0x290>)
 8000aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <main+0x294>)
 8000ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab8:	491d      	ldr	r1, [pc, #116]	; (8000b30 <main+0x298>)
 8000aba:	481e      	ldr	r0, [pc, #120]	; (8000b34 <main+0x29c>)
 8000abc:	f003 feb6 	bl	800482c <siprintf>
	  //HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
	  HAL_UART_Transmit(&huart2, debug3, sizeof(debug3), 100);
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2264      	movs	r2, #100	; 0x64
 8000ac4:	491b      	ldr	r1, [pc, #108]	; (8000b34 <main+0x29c>)
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <main+0x27c>)
 8000ac8:	f003 fb09 	bl	80040de <HAL_UART_Transmit>

	  HAL_Delay(delay);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 ff4e 	bl	8001970 <HAL_Delay>

	  delaycnt = delaycnt + delay;
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
	  delayswitch = delaycnt % 4000;
 8000adc:	e714      	b.n	8000908 <main+0x70>
 8000ade:	bf00      	nop
 8000ae0:	20000370 	.word	0x20000370
 8000ae4:	20000380 	.word	0x20000380
 8000ae8:	20000390 	.word	0x20000390
 8000aec:	200003a0 	.word	0x200003a0
 8000af0:	200003b0 	.word	0x200003b0
 8000af4:	200003c0 	.word	0x200003c0
 8000af8:	200003d0 	.word	0x200003d0
 8000afc:	10624dd3 	.word	0x10624dd3
 8000b00:	00000000 	.word	0x00000000
 8000b04:	200003bc 	.word	0x200003bc
 8000b08:	200003be 	.word	0x200003be
 8000b0c:	08005120 	.word	0x08005120
 8000b10:	20000000 	.word	0x20000000
 8000b14:	2000032c 	.word	0x2000032c
 8000b18:	200003cc 	.word	0x200003cc
 8000b1c:	200003ce 	.word	0x200003ce
 8000b20:	08005130 	.word	0x08005130
 8000b24:	20000064 	.word	0x20000064
 8000b28:	200003dc 	.word	0x200003dc
 8000b2c:	200003de 	.word	0x200003de
 8000b30:	08005140 	.word	0x08005140
 8000b34:	200000c8 	.word	0x200000c8

08000b38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fe68 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <_Z18SystemClock_Configv+0xe8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a2e      	ldr	r2, [pc, #184]	; (8000c20 <_Z18SystemClock_Configv+0xe8>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <_Z18SystemClock_Configv+0xe8>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <_Z18SystemClock_Configv+0xec>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <_Z18SystemClock_Configv+0xec>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <_Z18SystemClock_Configv+0xec>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bac:	2310      	movs	r3, #16
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fe44 	bl	8002854 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf14      	ite	ne
 8000bd2:	2301      	movne	r3, #1
 8000bd4:	2300      	moveq	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000bdc:	f000 fb2e 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fadf 	bl	80021c0 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	bf14      	ite	ne
 8000c08:	2301      	movne	r3, #1
 8000c0a:	2300      	moveq	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000c12:	f000 fb13 	bl	800123c <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3750      	adds	r7, #80	; 0x50
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <_ZL12MX_I2C1_Initv+0x60>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c34:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <_ZL12MX_I2C1_Initv+0x64>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <_ZL12MX_I2C1_Initv+0x5c>)
 8000c66:	f001 f967 	bl	8001f38 <HAL_I2C_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000c7a:	f000 fadf 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001b8 	.word	0x200001b8
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	000186a0 	.word	0x000186a0

08000c90 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b096      	sub	sp, #88	; 0x58
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fda7 	bl	800481c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cce:	4b67      	ldr	r3, [pc, #412]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cd0:	4a67      	ldr	r2, [pc, #412]	; (8000e70 <_ZL12MX_TIM1_Initv+0x1e0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000cd4:	4b65      	ldr	r3, [pc, #404]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cd6:	2253      	movs	r2, #83	; 0x53
 8000cd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b64      	ldr	r3, [pc, #400]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000ce0:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000ce2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ce6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b60      	ldr	r3, [pc, #384]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cee:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b5d      	ldr	r3, [pc, #372]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cfa:	485c      	ldr	r0, [pc, #368]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000cfc:	f002 f848 	bl	8002d90 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf14      	ite	ne
 8000d06:	2301      	movne	r3, #1
 8000d08:	2300      	moveq	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000d10:	f000 fa94 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4852      	ldr	r0, [pc, #328]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000d22:	f002 fca3 	bl	800366c <HAL_TIM_ConfigClockSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bf14      	ite	ne
 8000d2c:	2301      	movne	r3, #1
 8000d2e:	2300      	moveq	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000d36:	f000 fa81 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d3a:	484c      	ldr	r0, [pc, #304]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000d3c:	f002 f877 	bl	8002e2e <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8000d50:	f000 fa74 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d60:	4619      	mov	r1, r3
 8000d62:	4842      	ldr	r0, [pc, #264]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000d64:	f003 f88c 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf14      	ite	ne
 8000d6e:	2301      	movne	r3, #1
 8000d70:	2300      	moveq	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000d78:	f000 fa60 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4832      	ldr	r0, [pc, #200]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000da2:	f002 fba1 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2301      	movne	r3, #1
 8000dae:	2300      	moveq	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8000db6:	f000 fa41 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	482a      	ldr	r0, [pc, #168]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000dc4:	f002 fb90 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8000dd8:	f000 fa30 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	2208      	movs	r2, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	4821      	ldr	r0, [pc, #132]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000de6:	f002 fb7f 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf14      	ite	ne
 8000df0:	2301      	movne	r3, #1
 8000df2:	2300      	moveq	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8000dfa:	f000 fa1f 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	220c      	movs	r2, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000e08:	f002 fb6e 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8000e1c:	f000 fa0e 	bl	800123c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000e44:	f003 f898 	bl	8003f78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 8000e58:	f000 f9f0 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <_ZL12MX_TIM1_Initv+0x1dc>)
 8000e5e:	f000 fbd9 	bl	8001614 <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3758      	adds	r7, #88	; 0x58
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000020c 	.word	0x2000020c
 8000e70:	40010000 	.word	0x40010000

08000e74 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fcca 	bl	800481c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000ee4:	f002 f8c4 	bl	8003070 <HAL_TIM_Encoder_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf14      	ite	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	2300      	moveq	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8000ef8:	f000 f9a0 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <_ZL12MX_TIM2_Initv+0xb8>)
 8000f0a:	f002 ffb9 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8000f1e:	f000 f98d 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3730      	adds	r7, #48	; 0x30
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000254 	.word	0x20000254

08000f30 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fc6c 	bl	800481c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <_ZL12MX_TIM3_Initv+0xb8>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f72:	2303      	movs	r3, #3
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000f9e:	f002 f867 	bl	8003070 <HAL_TIM_Encoder_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf14      	ite	ne
 8000fa8:	2301      	movne	r3, #1
 8000faa:	2300      	moveq	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000fb2:	f000 f943 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000fc4:	f002 ff5c 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8000fd8:	f000 f930 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000029c 	.word	0x2000029c
 8000fe8:	40000400 	.word	0x40000400

08000fec <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2224      	movs	r2, #36	; 0x24
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fc0e 	bl	800481c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <_ZL12MX_TIM5_Initv+0xb8>)
 800100c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800101c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001020:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800102e:	2303      	movs	r3, #3
 8001030:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001046:	2301      	movs	r3, #1
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800105a:	f002 f809 	bl	8003070 <HAL_TIM_Encoder_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800106e:	f000 f8e5 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001080:	f002 fefe 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001094:	f000 f8d2 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3730      	adds	r7, #48	; 0x30
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002e4 	.word	0x200002e4
 80010a4:	40000c00 	.word	0x40000c00

080010a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_ZL19MX_USART2_UART_Initv+0x58>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e0:	f002 ffb0 	bl	8004044 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80010f4:	f000 f8a2 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000032c 	.word	0x2000032c
 8001100:	40004400 	.word	0x40004400

08001104 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a42      	ldr	r2, [pc, #264]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b40      	ldr	r3, [pc, #256]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b3c      	ldr	r3, [pc, #240]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a3b      	ldr	r2, [pc, #236]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a34      	ldr	r2, [pc, #208]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <_ZL12MX_GPIO_Initv+0x128>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001190:	4827      	ldr	r0, [pc, #156]	; (8001230 <_ZL12MX_GPIO_Initv+0x12c>)
 8001192:	f000 feb7 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800119c:	4825      	ldr	r0, [pc, #148]	; (8001234 <_ZL12MX_GPIO_Initv+0x130>)
 800119e:	f000 feb1 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4823      	ldr	r0, [pc, #140]	; (8001238 <_ZL12MX_GPIO_Initv+0x134>)
 80011aa:	f000 feab 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <_ZL12MX_GPIO_Initv+0x130>)
 80011c6:	f000 fd09 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 80011ca:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <_ZL12MX_GPIO_Initv+0x12c>)
 80011e4:	f000 fcfa 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 80011e8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <_ZL12MX_GPIO_Initv+0x130>)
 8001202:	f000 fceb 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <_ZL12MX_GPIO_Initv+0x134>)
 8001220:	f000 fcdc 	bl	8001bdc <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020800 	.word	0x40020800
 8001238:	40020400 	.word	0x40020400

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d137      	bne.n	80012c8 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125e:	4293      	cmp	r3, r2
 8001260:	d132      	bne.n	80012c8 <_Z41__static_initialization_and_destruction_0ii+0x80>
Motor motor1(&htim1, TIM_CHANNEL_1, GPIOB, GPIO_PIN_10);
 8001262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800126a:	2200      	movs	r2, #0
 800126c:	4919      	ldr	r1, [pc, #100]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001270:	f7ff fa0b 	bl	800068a <_ZN5MotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeft>
Motor motor2(&htim1, TIM_CHANNEL_2, GPIOC, GPIO_PIN_10);
 8001274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800127c:	2204      	movs	r2, #4
 800127e:	4915      	ldr	r1, [pc, #84]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001282:	f7ff fa02 	bl	800068a <_ZN5MotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeft>
Motor motor3(&htim1, TIM_CHANNEL_3, GPIOC, GPIO_PIN_4);
 8001286:	2310      	movs	r3, #16
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800128c:	2208      	movs	r2, #8
 800128e:	4911      	ldr	r1, [pc, #68]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001290:	4814      	ldr	r0, [pc, #80]	; (80012e4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001292:	f7ff f9fa 	bl	800068a <_ZN5MotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeft>
Motor motor4(&htim1, TIM_CHANNEL_4, GPIOA, GPIO_PIN_12);
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800129e:	220c      	movs	r2, #12
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80012a2:	4812      	ldr	r0, [pc, #72]	; (80012ec <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80012a4:	f7ff f9f1 	bl	800068a <_ZN5MotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeft>
Encoder enc1(&htim2, TIM2);
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ac:	4910      	ldr	r1, [pc, #64]	; (80012f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80012b0:	f7ff f980 	bl	80005b4 <_ZN7EncoderC1EP17TIM_HandleTypeDefP11TIM_TypeDef>
Encoder enc2(&htim3, TIM3);
 80012b4:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80012b6:	4911      	ldr	r1, [pc, #68]	; (80012fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80012b8:	4811      	ldr	r0, [pc, #68]	; (8001300 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80012ba:	f7ff f97b 	bl	80005b4 <_ZN7EncoderC1EP17TIM_HandleTypeDefP11TIM_TypeDef>
Encoder enc3(&htim5, TIM5);
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80012c0:	4911      	ldr	r1, [pc, #68]	; (8001308 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80012c4:	f7ff f976 	bl	80005b4 <_ZN7EncoderC1EP17TIM_HandleTypeDefP11TIM_TypeDef>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020400 	.word	0x40020400
 80012d4:	2000020c 	.word	0x2000020c
 80012d8:	20000370 	.word	0x20000370
 80012dc:	40020800 	.word	0x40020800
 80012e0:	20000380 	.word	0x20000380
 80012e4:	20000390 	.word	0x20000390
 80012e8:	40020000 	.word	0x40020000
 80012ec:	200003a0 	.word	0x200003a0
 80012f0:	20000254 	.word	0x20000254
 80012f4:	200003b0 	.word	0x200003b0
 80012f8:	40000400 	.word	0x40000400
 80012fc:	2000029c 	.word	0x2000029c
 8001300:	200003c0 	.word	0x200003c0
 8001304:	40000c00 	.word	0x40000c00
 8001308:	200002e4 	.word	0x200002e4
 800130c:	200003d0 	.word	0x200003d0

08001310 <_GLOBAL__sub_I_hi2c1>:
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
 8001314:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff ff95 	bl	8001248 <_Z41__static_initialization_and_destruction_0ii>
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 fbfa 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_I2C_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12b      	bne.n	80013ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ae:	23c0      	movs	r3, #192	; 0xc0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013be:	2304      	movs	r3, #4
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <HAL_I2C_MspInit+0x8c>)
 80013ca:	f000 fc07 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_TIM_Base_MspInit+0x3c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10d      	bne.n	800142e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001464:	d154      	bne.n	8001510 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a5d      	ldr	r2, [pc, #372]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a56      	ldr	r2, [pc, #344]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014cc:	2301      	movs	r3, #1
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	484b      	ldr	r0, [pc, #300]	; (8001604 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80014d8:	f000 fb80 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4843      	ldr	r0, [pc, #268]	; (8001608 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80014fa:	f000 fb6f 	bl	8001bdc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	201c      	movs	r0, #28
 8001504:	f000 fb33 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001508:	201c      	movs	r0, #28
 800150a:	f000 fb4c 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800150e:	e072      	b.n	80015f6 <HAL_TIM_Encoder_MspInit+0x1b2>
  else if(htim_encoder->Instance==TIM3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a3d      	ldr	r2, [pc, #244]	; (800160c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d134      	bne.n	8001584 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a37      	ldr	r2, [pc, #220]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001562:	2302      	movs	r3, #2
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4825      	ldr	r0, [pc, #148]	; (8001604 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800156e:	f000 fb35 	bl	8001bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	201d      	movs	r0, #29
 8001578:	f000 faf9 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800157c:	201d      	movs	r0, #29
 800157e:	f000 fb12 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
}
 8001582:	e038      	b.n	80015f6 <HAL_TIM_Encoder_MspInit+0x1b2>
  else if(htim_encoder->Instance==TIM5)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d133      	bne.n	80015f6 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c6:	2303      	movs	r3, #3
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015d6:	2302      	movs	r3, #2
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80015e2:	f000 fafb 	bl	8001bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2032      	movs	r0, #50	; 0x32
 80015ec:	f000 fabf 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015f0:	2032      	movs	r0, #50	; 0x32
 80015f2:	f000 fad8 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3738      	adds	r7, #56	; 0x38
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40000400 	.word	0x40000400
 8001610:	40000c00 	.word	0x40000c00

08001614 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <HAL_TIM_MspPostInit+0x68>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d11e      	bne.n	8001674 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_TIM_MspPostInit+0x6c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_TIM_MspPostInit+0x6c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_TIM_MspPostInit+0x6c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001652:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001664:	2301      	movs	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_TIM_MspPostInit+0x70>)
 8001670:	f000 fab4 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40010000 	.word	0x40010000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_UART_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12b      	bne.n	8001702 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e2:	230c      	movs	r3, #12
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f2:	2307      	movs	r3, #7
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspInit+0x8c>)
 80016fe:	f000 fa6d 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004400 	.word	0x40004400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f8e4 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM2_IRQHandler+0x10>)
 8001772:	f001 fdb1 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000254 	.word	0x20000254

08001780 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM3_IRQHandler+0x10>)
 8001786:	f001 fda7 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000029c 	.word	0x2000029c

08001794 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM5_IRQHandler+0x10>)
 800179a:	f001 fd9d 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200002e4 	.word	0x200002e4

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f002 fff6 	bl	80047c8 <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20020000 	.word	0x20020000
 8001808:	00000400 	.word	0x00000400
 800180c:	200003e0 	.word	0x200003e0
 8001810:	200003f8 	.word	0x200003f8

08001814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183e:	490e      	ldr	r1, [pc, #56]	; (8001878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001854:	4c0b      	ldr	r4, [pc, #44]	; (8001884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001862:	f7ff ffd7 	bl	8001814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001866:	f002 ffb5 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186a:	f7ff f815 	bl	8000898 <main>
  bx  lr    
 800186e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800187c:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 8001880:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001884:	200003f8 	.word	0x200003f8

08001888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC_IRQHandler>
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_Init+0x40>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_Init+0x40>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x40>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f94f 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fd2e 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f967 	bl	8001bc2 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f92f 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000012c 	.word	0x2000012c
 8001928:	20000134 	.word	0x20000134
 800192c:	20000130 	.word	0x20000130

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000134 	.word	0x20000134
 8001954:	200003e4 	.word	0x200003e4

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200003e4 	.word	0x200003e4

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000134 	.word	0x20000134

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff29 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff3e 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff31 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e165      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8154 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ae 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x308>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x202>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae96 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e12b      	b.n	80021a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fa06 	bl	8001370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	; 0x24
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f9c:	f000 fa02 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8001fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a81      	ldr	r2, [pc, #516]	; (80021ac <HAL_I2C_Init+0x274>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d807      	bhi.n	8001fbc <HAL_I2C_Init+0x84>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a80      	ldr	r2, [pc, #512]	; (80021b0 <HAL_I2C_Init+0x278>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	bf94      	ite	ls
 8001fb4:	2301      	movls	r3, #1
 8001fb6:	2300      	movhi	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e006      	b.n	8001fca <HAL_I2C_Init+0x92>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a7d      	ldr	r2, [pc, #500]	; (80021b4 <HAL_I2C_Init+0x27c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	bf94      	ite	ls
 8001fc4:	2301      	movls	r3, #1
 8001fc6:	2300      	movhi	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0e7      	b.n	80021a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a78      	ldr	r2, [pc, #480]	; (80021b8 <HAL_I2C_Init+0x280>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_I2C_Init+0x274>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d802      	bhi.n	800200c <HAL_I2C_Init+0xd4>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	e009      	b.n	8002020 <HAL_I2C_Init+0xe8>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_I2C_Init+0x284>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	3301      	adds	r3, #1
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	495c      	ldr	r1, [pc, #368]	; (80021ac <HAL_I2C_Init+0x274>)
 800203c:	428b      	cmp	r3, r1
 800203e:	d819      	bhi.n	8002074 <HAL_I2C_Init+0x13c>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e59      	subs	r1, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fbb1 f3f3 	udiv	r3, r1, r3
 800204e:	1c59      	adds	r1, r3, #1
 8002050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002054:	400b      	ands	r3, r1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_I2C_Init+0x138>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e59      	subs	r1, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fbb1 f3f3 	udiv	r3, r1, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206e:	e051      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 8002070:	2304      	movs	r3, #4
 8002072:	e04f      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d111      	bne.n	80020a0 <HAL_I2C_Init+0x168>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e012      	b.n	80020c6 <HAL_I2C_Init+0x18e>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	0099      	lsls	r1, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Init+0x196>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e022      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <HAL_I2C_Init+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1e58      	subs	r0, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	440b      	add	r3, r1
 80020e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	e00f      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	6809      	ldr	r1, [r1, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6911      	ldr	r1, [r2, #16]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68d2      	ldr	r2, [r2, #12]
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	000186a0 	.word	0x000186a0
 80021b0:	001e847f 	.word	0x001e847f
 80021b4:	003d08ff 	.word	0x003d08ff
 80021b8:	431bde83 	.word	0x431bde83
 80021bc:	10624dd3 	.word	0x10624dd3

080021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0cc      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d90c      	bls.n	80021fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0b8      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800221e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	494d      	ldr	r1, [pc, #308]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d044      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d119      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d003      	beq.n	800227e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	2b03      	cmp	r3, #3
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e067      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4934      	ldr	r1, [pc, #208]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7ff fb52 	bl	8001958 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7ff fb4e 	bl	8001958 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e04f      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d20c      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e032      	b.n	800236e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4916      	ldr	r1, [pc, #88]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002346:	f000 f855 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 800234a:	4602      	mov	r2, r0
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fab2 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00
 800237c:	40023800 	.word	0x40023800
 8002380:	08005150 	.word	0x08005150
 8002384:	2000012c 	.word	0x2000012c
 8002388:	20000130 	.word	0x20000130

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	2000012c 	.word	0x2000012c

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a8:	f7ff fff0 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08005160 	.word	0x08005160

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d0:	f7ff ffdc 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0b5b      	lsrs	r3, r3, #13
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08005160 	.word	0x08005160

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b0ae      	sub	sp, #184	; 0xb8
 80023fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241a:	4bcb      	ldr	r3, [pc, #812]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b0c      	cmp	r3, #12
 8002424:	f200 8206 	bhi.w	8002834 <HAL_RCC_GetSysClockFreq+0x440>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <HAL_RCC_GetSysClockFreq+0x3c>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002465 	.word	0x08002465
 8002434:	08002835 	.word	0x08002835
 8002438:	08002835 	.word	0x08002835
 800243c:	08002835 	.word	0x08002835
 8002440:	0800246d 	.word	0x0800246d
 8002444:	08002835 	.word	0x08002835
 8002448:	08002835 	.word	0x08002835
 800244c:	08002835 	.word	0x08002835
 8002450:	08002475 	.word	0x08002475
 8002454:	08002835 	.word	0x08002835
 8002458:	08002835 	.word	0x08002835
 800245c:	08002835 	.word	0x08002835
 8002460:	08002665 	.word	0x08002665
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002464:	4bb9      	ldr	r3, [pc, #740]	; (800274c <HAL_RCC_GetSysClockFreq+0x358>)
 8002466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800246a:	e1e7      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4bb8      	ldr	r3, [pc, #736]	; (8002750 <HAL_RCC_GetSysClockFreq+0x35c>)
 800246e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002472:	e1e3      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002474:	4bb4      	ldr	r3, [pc, #720]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002480:	4bb1      	ldr	r3, [pc, #708]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d071      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248c:	4bae      	ldr	r3, [pc, #696]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	2200      	movs	r2, #0
 8002494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002498:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800249c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	f04f 0000 	mov.w	r0, #0
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	0159      	lsls	r1, r3, #5
 80024c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c4:	0150      	lsls	r0, r2, #5
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4621      	mov	r1, r4
 80024cc:	1a51      	subs	r1, r2, r1
 80024ce:	6439      	str	r1, [r7, #64]	; 0x40
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb63 0301 	sbc.w	r3, r3, r1
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024e4:	4649      	mov	r1, r9
 80024e6:	018b      	lsls	r3, r1, #6
 80024e8:	4641      	mov	r1, r8
 80024ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ee:	4641      	mov	r1, r8
 80024f0:	018a      	lsls	r2, r1, #6
 80024f2:	4641      	mov	r1, r8
 80024f4:	1a51      	subs	r1, r2, r1
 80024f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024f8:	4649      	mov	r1, r9
 80024fa:	eb63 0301 	sbc.w	r3, r3, r1
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800250c:	4649      	mov	r1, r9
 800250e:	00cb      	lsls	r3, r1, #3
 8002510:	4641      	mov	r1, r8
 8002512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002516:	4641      	mov	r1, r8
 8002518:	00ca      	lsls	r2, r1, #3
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	4603      	mov	r3, r0
 8002520:	4622      	mov	r2, r4
 8002522:	189b      	adds	r3, r3, r2
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
 8002526:	462b      	mov	r3, r5
 8002528:	460a      	mov	r2, r1
 800252a:	eb42 0303 	adc.w	r3, r2, r3
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800253c:	4629      	mov	r1, r5
 800253e:	024b      	lsls	r3, r1, #9
 8002540:	4621      	mov	r1, r4
 8002542:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002546:	4621      	mov	r1, r4
 8002548:	024a      	lsls	r2, r1, #9
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800255c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002560:	f7fd fea6 	bl	80002b0 <__aeabi_uldivmod>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4613      	mov	r3, r2
 800256a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800256e:	e067      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	2200      	movs	r2, #0
 8002578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800257c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002588:	67bb      	str	r3, [r7, #120]	; 0x78
 800258a:	2300      	movs	r3, #0
 800258c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800258e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002592:	4622      	mov	r2, r4
 8002594:	462b      	mov	r3, r5
 8002596:	f04f 0000 	mov.w	r0, #0
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	0159      	lsls	r1, r3, #5
 80025a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a4:	0150      	lsls	r0, r2, #5
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4621      	mov	r1, r4
 80025ac:	1a51      	subs	r1, r2, r1
 80025ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80025b0:	4629      	mov	r1, r5
 80025b2:	eb63 0301 	sbc.w	r3, r3, r1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025c4:	4649      	mov	r1, r9
 80025c6:	018b      	lsls	r3, r1, #6
 80025c8:	4641      	mov	r1, r8
 80025ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ce:	4641      	mov	r1, r8
 80025d0:	018a      	lsls	r2, r1, #6
 80025d2:	4641      	mov	r1, r8
 80025d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d8:	4649      	mov	r1, r9
 80025da:	eb63 0b01 	sbc.w	fp, r3, r1
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025f2:	4692      	mov	sl, r2
 80025f4:	469b      	mov	fp, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	eb1a 0303 	adds.w	r3, sl, r3
 80025fc:	623b      	str	r3, [r7, #32]
 80025fe:	462b      	mov	r3, r5
 8002600:	eb4b 0303 	adc.w	r3, fp, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002612:	4629      	mov	r1, r5
 8002614:	028b      	lsls	r3, r1, #10
 8002616:	4621      	mov	r1, r4
 8002618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800261c:	4621      	mov	r1, r4
 800261e:	028a      	lsls	r2, r1, #10
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002628:	2200      	movs	r2, #0
 800262a:	673b      	str	r3, [r7, #112]	; 0x70
 800262c:	677a      	str	r2, [r7, #116]	; 0x74
 800262e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002632:	f7fd fe3d 	bl	80002b0 <__aeabi_uldivmod>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4613      	mov	r3, r2
 800263c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002640:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002662:	e0eb      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d06b      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_RCC_GetSysClockFreq+0x354>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	2200      	movs	r2, #0
 8002684:	66bb      	str	r3, [r7, #104]	; 0x68
 8002686:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	663b      	str	r3, [r7, #96]	; 0x60
 8002690:	2300      	movs	r3, #0
 8002692:	667b      	str	r3, [r7, #100]	; 0x64
 8002694:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002698:	4622      	mov	r2, r4
 800269a:	462b      	mov	r3, r5
 800269c:	f04f 0000 	mov.w	r0, #0
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	0159      	lsls	r1, r3, #5
 80026a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026aa:	0150      	lsls	r0, r2, #5
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4621      	mov	r1, r4
 80026b2:	1a51      	subs	r1, r2, r1
 80026b4:	61b9      	str	r1, [r7, #24]
 80026b6:	4629      	mov	r1, r5
 80026b8:	eb63 0301 	sbc.w	r3, r3, r1
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026ca:	4659      	mov	r1, fp
 80026cc:	018b      	lsls	r3, r1, #6
 80026ce:	4651      	mov	r1, sl
 80026d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d4:	4651      	mov	r1, sl
 80026d6:	018a      	lsls	r2, r1, #6
 80026d8:	4651      	mov	r1, sl
 80026da:	ebb2 0801 	subs.w	r8, r2, r1
 80026de:	4659      	mov	r1, fp
 80026e0:	eb63 0901 	sbc.w	r9, r3, r1
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f8:	4690      	mov	r8, r2
 80026fa:	4699      	mov	r9, r3
 80026fc:	4623      	mov	r3, r4
 80026fe:	eb18 0303 	adds.w	r3, r8, r3
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	462b      	mov	r3, r5
 8002706:	eb49 0303 	adc.w	r3, r9, r3
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002718:	4629      	mov	r1, r5
 800271a:	024b      	lsls	r3, r1, #9
 800271c:	4621      	mov	r1, r4
 800271e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002722:	4621      	mov	r1, r4
 8002724:	024a      	lsls	r2, r1, #9
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800272e:	2200      	movs	r2, #0
 8002730:	65bb      	str	r3, [r7, #88]	; 0x58
 8002732:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002734:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002738:	f7fd fdba 	bl	80002b0 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4613      	mov	r3, r2
 8002742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002746:	e065      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x420>
 8002748:	40023800 	.word	0x40023800
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_GetSysClockFreq+0x458>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	2200      	movs	r2, #0
 800275c:	4618      	mov	r0, r3
 800275e:	4611      	mov	r1, r2
 8002760:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002764:	653b      	str	r3, [r7, #80]	; 0x50
 8002766:	2300      	movs	r3, #0
 8002768:	657b      	str	r3, [r7, #84]	; 0x54
 800276a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002780:	0150      	lsls	r0, r2, #5
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4641      	mov	r1, r8
 8002788:	1a51      	subs	r1, r2, r1
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	4649      	mov	r1, r9
 800278e:	eb63 0301 	sbc.w	r3, r3, r1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027a0:	4659      	mov	r1, fp
 80027a2:	018b      	lsls	r3, r1, #6
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027aa:	4651      	mov	r1, sl
 80027ac:	018a      	lsls	r2, r1, #6
 80027ae:	4651      	mov	r1, sl
 80027b0:	1a54      	subs	r4, r2, r1
 80027b2:	4659      	mov	r1, fp
 80027b4:	eb63 0501 	sbc.w	r5, r3, r1
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	00eb      	lsls	r3, r5, #3
 80027c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c6:	00e2      	lsls	r2, r4, #3
 80027c8:	4614      	mov	r4, r2
 80027ca:	461d      	mov	r5, r3
 80027cc:	4643      	mov	r3, r8
 80027ce:	18e3      	adds	r3, r4, r3
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	464b      	mov	r3, r9
 80027d4:	eb45 0303 	adc.w	r3, r5, r3
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e6:	4629      	mov	r1, r5
 80027e8:	028b      	lsls	r3, r1, #10
 80027ea:	4621      	mov	r1, r4
 80027ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f0:	4621      	mov	r1, r4
 80027f2:	028a      	lsls	r2, r1, #10
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027fc:	2200      	movs	r2, #0
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002800:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002802:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002806:	f7fd fd53 	bl	80002b0 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4613      	mov	r3, r2
 8002810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_GetSysClockFreq+0x458>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	0f1b      	lsrs	r3, r3, #28
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002832:	e003      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800283a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002840:	4618      	mov	r0, r3
 8002842:	37b8      	adds	r7, #184	; 0xb8
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400

08002854 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e28d      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8083 	beq.w	800297a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002874:	4b94      	ldr	r3, [pc, #592]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b04      	cmp	r3, #4
 800287e:	d019      	beq.n	80028b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002880:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002888:	2b08      	cmp	r3, #8
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800288c:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002898:	d00c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d112      	bne.n	80028cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b2:	d10b      	bne.n	80028cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d05b      	beq.n	8002978 <HAL_RCC_OscConfig+0x124>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d157      	bne.n	8002978 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e25a      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d106      	bne.n	80028e4 <HAL_RCC_OscConfig+0x90>
 80028d6:	4b7c      	ldr	r3, [pc, #496]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7b      	ldr	r2, [pc, #492]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e01d      	b.n	8002920 <HAL_RCC_OscConfig+0xcc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0xb4>
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a75      	ldr	r2, [pc, #468]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a72      	ldr	r2, [pc, #456]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0xcc>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800290e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b6c      	ldr	r3, [pc, #432]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6b      	ldr	r2, [pc, #428]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800291a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d013      	beq.n	8002950 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff f816 	bl	8001958 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff f812 	bl	8001958 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e21f      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0xdc>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff f802 	bl	8001958 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fffe 	bl	8001958 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e20b      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296a:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x104>
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06f      	beq.n	8002a66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b00      	cmp	r3, #0
 8002990:	d017      	beq.n	80029c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002992:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299e:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RCC_OscConfig+0x186>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e1d3      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4937      	ldr	r1, [pc, #220]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e03a      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x278>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe ffab 	bl	8001958 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a06:	f7fe ffa7 	bl	8001958 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1b4      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4925      	ldr	r1, [pc, #148]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_OscConfig+0x278>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe ff8a 	bl	8001958 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fe ff86 	bl	8001958 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e193      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d036      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7fe ff6a 	bl	8001958 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe ff66 	bl	8001958 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e173      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x234>
 8002aa6:	e01b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7fe ff53 	bl	8001958 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	e00e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7fe ff4f 	bl	8001958 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d907      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e15c      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	42470000 	.word	0x42470000
 8002ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ea      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8097 	beq.w	8002c1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b83      	ldr	r3, [pc, #524]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a7e      	ldr	r2, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fe ff0f 	bl	8001958 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fe ff0b 	bl	8001958 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e118      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_RCC_OscConfig+0x4b0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x31e>
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x358>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x340>
 8002b7a:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0x358>
 8002b94:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a59      	ldr	r2, [pc, #356]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fed0 	bl	8001958 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fecc 	bl	8001958 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0d7      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ee      	beq.n	8002bbc <HAL_RCC_OscConfig+0x368>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe feba 	bl	8001958 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe feb6 	bl	8001958 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0c1      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ee      	bne.n	8002be8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80ad 	beq.w	8002d80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d060      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d145      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x4b4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fe8a 	bl	8001958 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fe86 	bl	8001958 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e093      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x4b4>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fe5b 	bl	8001958 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fe57 	bl	8001958 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e064      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x452>
 8002cc4:	e05c      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x4b4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fe44 	bl	8001958 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fe40 	bl	8001958 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e04d      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x480>
 8002cf2:	e045      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e040      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x538>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d030      	beq.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d129      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d122      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d119      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10f      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e041      	b.n	8002e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fb22 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fd46 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e041      	b.n	8002ec4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f839 	bl	8002ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f000 fcf7 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_TIM_PWM_Start+0x24>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e022      	b.n	8002f4a <HAL_TIM_PWM_Start+0x6a>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d109      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x3e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e015      	b.n	8002f4a <HAL_TIM_PWM_Start+0x6a>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d109      	bne.n	8002f38 <HAL_TIM_PWM_Start+0x58>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e008      	b.n	8002f4a <HAL_TIM_PWM_Start+0x6a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07c      	b.n	800304c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_TIM_PWM_Start+0x82>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f60:	e013      	b.n	8002f8a <HAL_TIM_PWM_Start+0xaa>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d104      	bne.n	8002f72 <HAL_TIM_PWM_Start+0x92>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f70:	e00b      	b.n	8002f8a <HAL_TIM_PWM_Start+0xaa>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d104      	bne.n	8002f82 <HAL_TIM_PWM_Start+0xa2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	e003      	b.n	8002f8a <HAL_TIM_PWM_Start+0xaa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	6839      	ldr	r1, [r7, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 ff4e 	bl	8003e34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <HAL_TIM_PWM_Start+0x174>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_PWM_Start+0xcc>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <HAL_TIM_PWM_Start+0x178>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_PWM_Start+0xd0>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_TIM_PWM_Start+0xd2>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_TIM_PWM_Start+0x174>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d01d      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_TIM_PWM_Start+0x17c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_TIM_PWM_Start+0x180>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_TIM_PWM_Start+0x184>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <HAL_TIM_PWM_Start+0x178>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_TIM_PWM_Start+0x188>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_TIM_PWM_Start+0x136>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_TIM_PWM_Start+0x18c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d111      	bne.n	800303a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d010      	beq.n	800304a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	e007      	b.n	800304a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40010000 	.word	0x40010000
 8003058:	40010400 	.word	0x40010400
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40014000 	.word	0x40014000
 800306c:	40001800 	.word	0x40001800

08003070 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e097      	b.n	80031b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fe f9d3 	bl	8001444 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b4:	f023 0307 	bic.w	r3, r3, #7
 80030b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f000 fbcb 	bl	8003860 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4313      	orrs	r3, r2
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003110:	f023 030c 	bic.w	r3, r3, #12
 8003114:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800311c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	4313      	orrs	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	011a      	lsls	r2, r3, #4
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	031b      	lsls	r3, r3, #12
 8003140:	4313      	orrs	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003156:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	4313      	orrs	r3, r2
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d110      	bne.n	800320e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031f2:	7b7b      	ldrb	r3, [r7, #13]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d001      	beq.n	80031fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e069      	b.n	80032d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	e031      	b.n	8003272 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d110      	bne.n	8003236 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d102      	bne.n	8003220 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800321a:	7b3b      	ldrb	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e055      	b.n	80032d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	e01d      	b.n	8003272 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800323c:	7bbb      	ldrb	r3, [r7, #14]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003242:	7b7b      	ldrb	r3, [r7, #13]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d102      	bne.n	800324e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003248:	7b3b      	ldrb	r3, [r7, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e03e      	b.n	80032d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_TIM_Encoder_Start+0xc4>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d008      	beq.n	8003290 <HAL_TIM_Encoder_Start+0xd4>
 800327e:	e00f      	b.n	80032a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2201      	movs	r2, #1
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fdd3 	bl	8003e34 <TIM_CCxChannelCmd>
      break;
 800328e:	e016      	b.n	80032be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	2104      	movs	r1, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fdcb 	bl	8003e34 <TIM_CCxChannelCmd>
      break;
 800329e:	e00e      	b.n	80032be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fdc3 	bl	8003e34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	2104      	movs	r1, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fdbc 	bl	8003e34 <TIM_CCxChannelCmd>
      break;
 80032bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0202 	mvn.w	r2, #2
 8003304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa81 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa73 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fa84 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b04      	cmp	r3, #4
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0204 	mvn.w	r2, #4
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa57 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa49 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fa5a 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b08      	cmp	r3, #8
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0208 	mvn.w	r2, #8
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa2d 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa1f 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa30 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0210 	mvn.w	r2, #16
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa03 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f9f5 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa06 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10e      	bne.n	800345c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0201 	mvn.w	r2, #1
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9cf 	bl	80037fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b80      	cmp	r3, #128	; 0x80
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fdd4 	bl	8004030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9cb 	bl	800384a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0220 	mvn.w	r2, #32
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fd9e 	bl	800401c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e0ae      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	f200 809f 	bhi.w	8003654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003551 	.word	0x08003551
 8003520:	08003655 	.word	0x08003655
 8003524:	08003655 	.word	0x08003655
 8003528:	08003655 	.word	0x08003655
 800352c:	08003591 	.word	0x08003591
 8003530:	08003655 	.word	0x08003655
 8003534:	08003655 	.word	0x08003655
 8003538:	08003655 	.word	0x08003655
 800353c:	080035d3 	.word	0x080035d3
 8003540:	08003655 	.word	0x08003655
 8003544:	08003655 	.word	0x08003655
 8003548:	08003655 	.word	0x08003655
 800354c:	08003613 	.word	0x08003613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fa22 	bl	80039a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0208 	orr.w	r2, r2, #8
 800356a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6999      	ldr	r1, [r3, #24]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	619a      	str	r2, [r3, #24]
      break;
 800358e:	e064      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa72 	bl	8003a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
      break;
 80035d0:	e043      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fac7 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0208 	orr.w	r2, r2, #8
 80035ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0204 	bic.w	r2, r2, #4
 80035fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]
      break;
 8003610:	e023      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fb1b 	bl	8003c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	61da      	str	r2, [r3, #28]
      break;
 8003652:	e002      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
      break;
 8003658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIM_ConfigClockSource+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e0b4      	b.n	80037f2 <HAL_TIM_ConfigClockSource+0x186>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c0:	d03e      	beq.n	8003740 <HAL_TIM_ConfigClockSource+0xd4>
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	f200 8087 	bhi.w	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	f000 8086 	beq.w	80037de <HAL_TIM_ConfigClockSource+0x172>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d87f      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b70      	cmp	r3, #112	; 0x70
 80036da:	d01a      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0xa6>
 80036dc:	2b70      	cmp	r3, #112	; 0x70
 80036de:	d87b      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b60      	cmp	r3, #96	; 0x60
 80036e2:	d050      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x11a>
 80036e4:	2b60      	cmp	r3, #96	; 0x60
 80036e6:	d877      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b50      	cmp	r3, #80	; 0x50
 80036ea:	d03c      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0xfa>
 80036ec:	2b50      	cmp	r3, #80	; 0x50
 80036ee:	d873      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d058      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0x13a>
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d86f      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b30      	cmp	r3, #48	; 0x30
 80036fa:	d064      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	2b30      	cmp	r3, #48	; 0x30
 80036fe:	d86b      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d060      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b20      	cmp	r3, #32
 8003706:	d867      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d05c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b10      	cmp	r3, #16
 800370e:	d05a      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003710:	e062      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6899      	ldr	r1, [r3, #8]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f000 fb67 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	609a      	str	r2, [r3, #8]
      break;
 800373e:	e04f      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6899      	ldr	r1, [r3, #8]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f000 fb50 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003762:	609a      	str	r2, [r3, #8]
      break;
 8003764:	e03c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	461a      	mov	r2, r3
 8003774:	f000 fac4 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2150      	movs	r1, #80	; 0x50
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fb1d 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003784:	e02c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	461a      	mov	r2, r3
 8003794:	f000 fae3 	bl	8003d5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2160      	movs	r1, #96	; 0x60
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fb0d 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80037a4:	e01c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f000 faa4 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2140      	movs	r1, #64	; 0x40
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fafd 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80037c4:	e00c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f000 faf4 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80037d6:	e003      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e000      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <TIM_Base_SetConfig+0x118>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3c      	ldr	r2, [pc, #240]	; (800397c <TIM_Base_SetConfig+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d027      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <TIM_Base_SetConfig+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d023      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <TIM_Base_SetConfig+0x11c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0x124>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d017      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <TIM_Base_SetConfig+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a25      	ldr	r2, [pc, #148]	; (8003994 <TIM_Base_SetConfig+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	40001800 	.word	0x40001800
 8003998:	40001c00 	.word	0x40001c00
 800399c:	40002000 	.word	0x40002000

080039a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f023 0302 	bic.w	r3, r3, #2
 80039e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <TIM_OC1_SetConfig+0xd8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC1_SetConfig+0x64>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <TIM_OC1_SetConfig+0xdc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10c      	bne.n	8003a1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0308 	bic.w	r3, r3, #8
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <TIM_OC1_SetConfig+0xd8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_OC1_SetConfig+0x8e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <TIM_OC1_SetConfig+0xdc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40010400 	.word	0x40010400

08003a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0210 	bic.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0320 	bic.w	r3, r3, #32
 8003aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <TIM_OC2_SetConfig+0xe4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC2_SetConfig+0x68>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <TIM_OC2_SetConfig+0xe8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10d      	bne.n	8003b04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <TIM_OC2_SetConfig+0xe4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC2_SetConfig+0x94>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <TIM_OC2_SetConfig+0xe8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d113      	bne.n	8003b3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40010400 	.word	0x40010400

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <TIM_OC3_SetConfig+0xe0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_OC3_SetConfig+0x66>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a20      	ldr	r2, [pc, #128]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10d      	bne.n	8003bee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <TIM_OC3_SetConfig+0xe0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_OC3_SetConfig+0x92>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d113      	bne.n	8003c26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <TIM_OC4_SetConfig+0xa4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_OC4_SetConfig+0x68>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <TIM_OC4_SetConfig+0xa8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d109      	bne.n	8003cd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	019b      	lsls	r3, r3, #6
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010400 	.word	0x40010400

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f023 0210 	bic.w	r2, r3, #16
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2201      	movs	r2, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e05a      	b.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d01d      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10c      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40001800 	.word	0x40001800

08003f78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e03d      	b.n	8004010 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e03f      	b.n	80040d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fb0c 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	; 0x24
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f929 	bl	80042e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800409c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b08a      	sub	sp, #40	; 0x28
 80040e2:	af02      	add	r7, sp, #8
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d17c      	bne.n	80041f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_UART_Transmit+0x2c>
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e075      	b.n	80041fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_UART_Transmit+0x3e>
 8004118:	2302      	movs	r3, #2
 800411a:	e06e      	b.n	80041fa <HAL_UART_Transmit+0x11c>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2221      	movs	r2, #33	; 0x21
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004132:	f7fd fc11 	bl	8001958 <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d108      	bne.n	8004160 <HAL_UART_Transmit+0x82>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e003      	b.n	8004168 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004170:	e02a      	b.n	80041c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f840 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e036      	b.n	80041fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3302      	adds	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e007      	b.n	80041ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cf      	bne.n	8004172 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2140      	movs	r1, #64	; 0x40
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f810 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e006      	b.n	80041fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b090      	sub	sp, #64	; 0x40
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004212:	e050      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d04c      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800421c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x30>
 8004222:	f7fd fb99 	bl	8001958 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800422e:	429a      	cmp	r2, r3
 8004230:	d241      	bcs.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004252:	637a      	str	r2, [r7, #52]	; 0x34
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	613b      	str	r3, [r7, #16]
   return(result);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	63bb      	str	r3, [r7, #56]	; 0x38
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004286:	623a      	str	r2, [r7, #32]
 8004288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	69f9      	ldr	r1, [r7, #28]
 800428c:	6a3a      	ldr	r2, [r7, #32]
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	61bb      	str	r3, [r7, #24]
   return(result);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e5      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00f      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d09f      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3740      	adds	r7, #64	; 0x40
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e4:	b0c0      	sub	sp, #256	; 0x100
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	68d9      	ldr	r1, [r3, #12]
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	ea40 0301 	orr.w	r3, r0, r1
 8004308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	431a      	orrs	r2, r3
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	431a      	orrs	r2, r3
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004338:	f021 010c 	bic.w	r1, r1, #12
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004346:	430b      	orrs	r3, r1
 8004348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	6999      	ldr	r1, [r3, #24]
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	ea40 0301 	orr.w	r3, r0, r1
 8004366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b8f      	ldr	r3, [pc, #572]	; (80045ac <UART_SetConfig+0x2cc>)
 8004370:	429a      	cmp	r2, r3
 8004372:	d005      	beq.n	8004380 <UART_SetConfig+0xa0>
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b8d      	ldr	r3, [pc, #564]	; (80045b0 <UART_SetConfig+0x2d0>)
 800437c:	429a      	cmp	r2, r3
 800437e:	d104      	bne.n	800438a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7fe f824 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8004384:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004388:	e003      	b.n	8004392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800438a:	f7fe f80b 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 800438e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	f040 810c 	bne.w	80045b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80043ba:	415b      	adcs	r3, r3
 80043bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043c2:	4621      	mov	r1, r4
 80043c4:	eb12 0801 	adds.w	r8, r2, r1
 80043c8:	4629      	mov	r1, r5
 80043ca:	eb43 0901 	adc.w	r9, r3, r1
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043e2:	4690      	mov	r8, r2
 80043e4:	4699      	mov	r9, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	eb18 0303 	adds.w	r3, r8, r3
 80043ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043f0:	462b      	mov	r3, r5
 80043f2:	eb49 0303 	adc.w	r3, r9, r3
 80043f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004406:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800440a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800440e:	460b      	mov	r3, r1
 8004410:	18db      	adds	r3, r3, r3
 8004412:	653b      	str	r3, [r7, #80]	; 0x50
 8004414:	4613      	mov	r3, r2
 8004416:	eb42 0303 	adc.w	r3, r2, r3
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
 800441c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004424:	f7fb ff44 	bl	80002b0 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <UART_SetConfig+0x2d4>)
 800442e:	fba3 2302 	umull	r2, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	011c      	lsls	r4, r3, #4
 8004436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004440:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	1891      	adds	r1, r2, r2
 800444e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004450:	415b      	adcs	r3, r3
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004458:	4641      	mov	r1, r8
 800445a:	eb12 0a01 	adds.w	sl, r2, r1
 800445e:	4649      	mov	r1, r9
 8004460:	eb43 0b01 	adc.w	fp, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004478:	4692      	mov	sl, r2
 800447a:	469b      	mov	fp, r3
 800447c:	4643      	mov	r3, r8
 800447e:	eb1a 0303 	adds.w	r3, sl, r3
 8004482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004486:	464b      	mov	r3, r9
 8004488:	eb4b 0303 	adc.w	r3, fp, r3
 800448c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800449c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044a4:	460b      	mov	r3, r1
 80044a6:	18db      	adds	r3, r3, r3
 80044a8:	643b      	str	r3, [r7, #64]	; 0x40
 80044aa:	4613      	mov	r3, r2
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	647b      	str	r3, [r7, #68]	; 0x44
 80044b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044ba:	f7fb fef9 	bl	80002b0 <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <UART_SetConfig+0x2d4>)
 80044c6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2264      	movs	r2, #100	; 0x64
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	1acb      	subs	r3, r1, r3
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044da:	4b36      	ldr	r3, [pc, #216]	; (80045b4 <UART_SetConfig+0x2d4>)
 80044dc:	fba3 2302 	umull	r2, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044e8:	441c      	add	r4, r3
 80044ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	1891      	adds	r1, r2, r2
 8004502:	63b9      	str	r1, [r7, #56]	; 0x38
 8004504:	415b      	adcs	r3, r3
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800450c:	4641      	mov	r1, r8
 800450e:	1851      	adds	r1, r2, r1
 8004510:	6339      	str	r1, [r7, #48]	; 0x30
 8004512:	4649      	mov	r1, r9
 8004514:	414b      	adcs	r3, r1
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004524:	4659      	mov	r1, fp
 8004526:	00cb      	lsls	r3, r1, #3
 8004528:	4651      	mov	r1, sl
 800452a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800452e:	4651      	mov	r1, sl
 8004530:	00ca      	lsls	r2, r1, #3
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	4603      	mov	r3, r0
 8004538:	4642      	mov	r2, r8
 800453a:	189b      	adds	r3, r3, r2
 800453c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004540:	464b      	mov	r3, r9
 8004542:	460a      	mov	r2, r1
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004558:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800455c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004560:	460b      	mov	r3, r1
 8004562:	18db      	adds	r3, r3, r3
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
 8004566:	4613      	mov	r3, r2
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004576:	f7fb fe9b 	bl	80002b0 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <UART_SetConfig+0x2d4>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2164      	movs	r1, #100	; 0x64
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <UART_SetConfig+0x2d4>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 0207 	and.w	r2, r3, #7
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4422      	add	r2, r4
 80045a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a8:	e105      	b.n	80047b6 <UART_SetConfig+0x4d6>
 80045aa:	bf00      	nop
 80045ac:	40011000 	.word	0x40011000
 80045b0:	40011400 	.word	0x40011400
 80045b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ca:	4642      	mov	r2, r8
 80045cc:	464b      	mov	r3, r9
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	6239      	str	r1, [r7, #32]
 80045d2:	415b      	adcs	r3, r3
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045da:	4641      	mov	r1, r8
 80045dc:	1854      	adds	r4, r2, r1
 80045de:	4649      	mov	r1, r9
 80045e0:	eb43 0501 	adc.w	r5, r3, r1
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	00eb      	lsls	r3, r5, #3
 80045ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f2:	00e2      	lsls	r2, r4, #3
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	4643      	mov	r3, r8
 80045fa:	18e3      	adds	r3, r4, r3
 80045fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004600:	464b      	mov	r3, r9
 8004602:	eb45 0303 	adc.w	r3, r5, r3
 8004606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004626:	4629      	mov	r1, r5
 8004628:	008b      	lsls	r3, r1, #2
 800462a:	4621      	mov	r1, r4
 800462c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004630:	4621      	mov	r1, r4
 8004632:	008a      	lsls	r2, r1, #2
 8004634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004638:	f7fb fe3a 	bl	80002b0 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4b60      	ldr	r3, [pc, #384]	; (80047c4 <UART_SetConfig+0x4e4>)
 8004642:	fba3 2302 	umull	r2, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	011c      	lsls	r4, r3, #4
 800464a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004654:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800465c:	4642      	mov	r2, r8
 800465e:	464b      	mov	r3, r9
 8004660:	1891      	adds	r1, r2, r2
 8004662:	61b9      	str	r1, [r7, #24]
 8004664:	415b      	adcs	r3, r3
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800466c:	4641      	mov	r1, r8
 800466e:	1851      	adds	r1, r2, r1
 8004670:	6139      	str	r1, [r7, #16]
 8004672:	4649      	mov	r1, r9
 8004674:	414b      	adcs	r3, r1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004684:	4659      	mov	r1, fp
 8004686:	00cb      	lsls	r3, r1, #3
 8004688:	4651      	mov	r1, sl
 800468a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468e:	4651      	mov	r1, sl
 8004690:	00ca      	lsls	r2, r1, #3
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	4603      	mov	r3, r0
 8004698:	4642      	mov	r2, r8
 800469a:	189b      	adds	r3, r3, r2
 800469c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046a0:	464b      	mov	r3, r9
 80046a2:	460a      	mov	r2, r1
 80046a4:	eb42 0303 	adc.w	r3, r2, r3
 80046a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046c4:	4649      	mov	r1, r9
 80046c6:	008b      	lsls	r3, r1, #2
 80046c8:	4641      	mov	r1, r8
 80046ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ce:	4641      	mov	r1, r8
 80046d0:	008a      	lsls	r2, r1, #2
 80046d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046d6:	f7fb fdeb 	bl	80002b0 <__aeabi_uldivmod>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <UART_SetConfig+0x4e4>)
 80046e0:	fba3 1302 	umull	r1, r3, r3, r2
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	2164      	movs	r1, #100	; 0x64
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	3332      	adds	r3, #50	; 0x32
 80046f2:	4a34      	ldr	r2, [pc, #208]	; (80047c4 <UART_SetConfig+0x4e4>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fe:	441c      	add	r4, r3
 8004700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004704:	2200      	movs	r2, #0
 8004706:	673b      	str	r3, [r7, #112]	; 0x70
 8004708:	677a      	str	r2, [r7, #116]	; 0x74
 800470a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800470e:	4642      	mov	r2, r8
 8004710:	464b      	mov	r3, r9
 8004712:	1891      	adds	r1, r2, r2
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	415b      	adcs	r3, r3
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800471e:	4641      	mov	r1, r8
 8004720:	1851      	adds	r1, r2, r1
 8004722:	6039      	str	r1, [r7, #0]
 8004724:	4649      	mov	r1, r9
 8004726:	414b      	adcs	r3, r1
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004736:	4659      	mov	r1, fp
 8004738:	00cb      	lsls	r3, r1, #3
 800473a:	4651      	mov	r1, sl
 800473c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004740:	4651      	mov	r1, sl
 8004742:	00ca      	lsls	r2, r1, #3
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	4603      	mov	r3, r0
 800474a:	4642      	mov	r2, r8
 800474c:	189b      	adds	r3, r3, r2
 800474e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004750:	464b      	mov	r3, r9
 8004752:	460a      	mov	r2, r1
 8004754:	eb42 0303 	adc.w	r3, r2, r3
 8004758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	663b      	str	r3, [r7, #96]	; 0x60
 8004764:	667a      	str	r2, [r7, #100]	; 0x64
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004772:	4649      	mov	r1, r9
 8004774:	008b      	lsls	r3, r1, #2
 8004776:	4641      	mov	r1, r8
 8004778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477c:	4641      	mov	r1, r8
 800477e:	008a      	lsls	r2, r1, #2
 8004780:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004784:	f7fb fd94 	bl	80002b0 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <UART_SetConfig+0x4e4>)
 800478e:	fba3 1302 	umull	r1, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2164      	movs	r1, #100	; 0x64
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	3332      	adds	r3, #50	; 0x32
 80047a0:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <UART_SetConfig+0x4e4>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4422      	add	r2, r4
 80047b4:	609a      	str	r2, [r3, #8]
}
 80047b6:	bf00      	nop
 80047b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047bc:	46bd      	mov	sp, r7
 80047be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c2:	bf00      	nop
 80047c4:	51eb851f 	.word	0x51eb851f

080047c8 <__errno>:
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <__errno+0x8>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000138 	.word	0x20000138

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4d0d      	ldr	r5, [pc, #52]	; (800480c <__libc_init_array+0x38>)
 80047d8:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <__libc_init_array+0x3c>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	2600      	movs	r6, #0
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4d0b      	ldr	r5, [pc, #44]	; (8004814 <__libc_init_array+0x40>)
 80047e6:	4c0c      	ldr	r4, [pc, #48]	; (8004818 <__libc_init_array+0x44>)
 80047e8:	f000 fc8e 	bl	8005108 <_init>
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	2600      	movs	r6, #0
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fc:	4798      	blx	r3
 80047fe:	3601      	adds	r6, #1
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f855 3b04 	ldr.w	r3, [r5], #4
 8004806:	4798      	blx	r3
 8004808:	3601      	adds	r6, #1
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	080051a4 	.word	0x080051a4
 8004810:	080051a4 	.word	0x080051a4
 8004814:	080051a4 	.word	0x080051a4
 8004818:	080051ac 	.word	0x080051ac

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <siprintf>:
 800482c:	b40e      	push	{r1, r2, r3}
 800482e:	b500      	push	{lr}
 8004830:	b09c      	sub	sp, #112	; 0x70
 8004832:	ab1d      	add	r3, sp, #116	; 0x74
 8004834:	9002      	str	r0, [sp, #8]
 8004836:	9006      	str	r0, [sp, #24]
 8004838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800483c:	4809      	ldr	r0, [pc, #36]	; (8004864 <siprintf+0x38>)
 800483e:	9107      	str	r1, [sp, #28]
 8004840:	9104      	str	r1, [sp, #16]
 8004842:	4909      	ldr	r1, [pc, #36]	; (8004868 <siprintf+0x3c>)
 8004844:	f853 2b04 	ldr.w	r2, [r3], #4
 8004848:	9105      	str	r1, [sp, #20]
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	a902      	add	r1, sp, #8
 8004850:	f000 f868 	bl	8004924 <_svfiprintf_r>
 8004854:	9b02      	ldr	r3, [sp, #8]
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	b01c      	add	sp, #112	; 0x70
 800485c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004860:	b003      	add	sp, #12
 8004862:	4770      	bx	lr
 8004864:	20000138 	.word	0x20000138
 8004868:	ffff0208 	.word	0xffff0208

0800486c <__ssputs_r>:
 800486c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	688e      	ldr	r6, [r1, #8]
 8004872:	429e      	cmp	r6, r3
 8004874:	4682      	mov	sl, r0
 8004876:	460c      	mov	r4, r1
 8004878:	4690      	mov	r8, r2
 800487a:	461f      	mov	r7, r3
 800487c:	d838      	bhi.n	80048f0 <__ssputs_r+0x84>
 800487e:	898a      	ldrh	r2, [r1, #12]
 8004880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004884:	d032      	beq.n	80048ec <__ssputs_r+0x80>
 8004886:	6825      	ldr	r5, [r4, #0]
 8004888:	6909      	ldr	r1, [r1, #16]
 800488a:	eba5 0901 	sub.w	r9, r5, r1
 800488e:	6965      	ldr	r5, [r4, #20]
 8004890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004898:	3301      	adds	r3, #1
 800489a:	444b      	add	r3, r9
 800489c:	106d      	asrs	r5, r5, #1
 800489e:	429d      	cmp	r5, r3
 80048a0:	bf38      	it	cc
 80048a2:	461d      	movcc	r5, r3
 80048a4:	0553      	lsls	r3, r2, #21
 80048a6:	d531      	bpl.n	800490c <__ssputs_r+0xa0>
 80048a8:	4629      	mov	r1, r5
 80048aa:	f000 fb63 	bl	8004f74 <_malloc_r>
 80048ae:	4606      	mov	r6, r0
 80048b0:	b950      	cbnz	r0, 80048c8 <__ssputs_r+0x5c>
 80048b2:	230c      	movs	r3, #12
 80048b4:	f8ca 3000 	str.w	r3, [sl]
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c8:	6921      	ldr	r1, [r4, #16]
 80048ca:	464a      	mov	r2, r9
 80048cc:	f000 fabe 	bl	8004e4c <memcpy>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	6126      	str	r6, [r4, #16]
 80048de:	6165      	str	r5, [r4, #20]
 80048e0:	444e      	add	r6, r9
 80048e2:	eba5 0509 	sub.w	r5, r5, r9
 80048e6:	6026      	str	r6, [r4, #0]
 80048e8:	60a5      	str	r5, [r4, #8]
 80048ea:	463e      	mov	r6, r7
 80048ec:	42be      	cmp	r6, r7
 80048ee:	d900      	bls.n	80048f2 <__ssputs_r+0x86>
 80048f0:	463e      	mov	r6, r7
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	4632      	mov	r2, r6
 80048f6:	4641      	mov	r1, r8
 80048f8:	f000 fab6 	bl	8004e68 <memmove>
 80048fc:	68a3      	ldr	r3, [r4, #8]
 80048fe:	1b9b      	subs	r3, r3, r6
 8004900:	60a3      	str	r3, [r4, #8]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	4433      	add	r3, r6
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	2000      	movs	r0, #0
 800490a:	e7db      	b.n	80048c4 <__ssputs_r+0x58>
 800490c:	462a      	mov	r2, r5
 800490e:	f000 fba5 	bl	800505c <_realloc_r>
 8004912:	4606      	mov	r6, r0
 8004914:	2800      	cmp	r0, #0
 8004916:	d1e1      	bne.n	80048dc <__ssputs_r+0x70>
 8004918:	6921      	ldr	r1, [r4, #16]
 800491a:	4650      	mov	r0, sl
 800491c:	f000 fabe 	bl	8004e9c <_free_r>
 8004920:	e7c7      	b.n	80048b2 <__ssputs_r+0x46>
	...

08004924 <_svfiprintf_r>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	4698      	mov	r8, r3
 800492a:	898b      	ldrh	r3, [r1, #12]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	b09d      	sub	sp, #116	; 0x74
 8004930:	4607      	mov	r7, r0
 8004932:	460d      	mov	r5, r1
 8004934:	4614      	mov	r4, r2
 8004936:	d50e      	bpl.n	8004956 <_svfiprintf_r+0x32>
 8004938:	690b      	ldr	r3, [r1, #16]
 800493a:	b963      	cbnz	r3, 8004956 <_svfiprintf_r+0x32>
 800493c:	2140      	movs	r1, #64	; 0x40
 800493e:	f000 fb19 	bl	8004f74 <_malloc_r>
 8004942:	6028      	str	r0, [r5, #0]
 8004944:	6128      	str	r0, [r5, #16]
 8004946:	b920      	cbnz	r0, 8004952 <_svfiprintf_r+0x2e>
 8004948:	230c      	movs	r3, #12
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e0d1      	b.n	8004af6 <_svfiprintf_r+0x1d2>
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	616b      	str	r3, [r5, #20]
 8004956:	2300      	movs	r3, #0
 8004958:	9309      	str	r3, [sp, #36]	; 0x24
 800495a:	2320      	movs	r3, #32
 800495c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004960:	f8cd 800c 	str.w	r8, [sp, #12]
 8004964:	2330      	movs	r3, #48	; 0x30
 8004966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b10 <_svfiprintf_r+0x1ec>
 800496a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800496e:	f04f 0901 	mov.w	r9, #1
 8004972:	4623      	mov	r3, r4
 8004974:	469a      	mov	sl, r3
 8004976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800497a:	b10a      	cbz	r2, 8004980 <_svfiprintf_r+0x5c>
 800497c:	2a25      	cmp	r2, #37	; 0x25
 800497e:	d1f9      	bne.n	8004974 <_svfiprintf_r+0x50>
 8004980:	ebba 0b04 	subs.w	fp, sl, r4
 8004984:	d00b      	beq.n	800499e <_svfiprintf_r+0x7a>
 8004986:	465b      	mov	r3, fp
 8004988:	4622      	mov	r2, r4
 800498a:	4629      	mov	r1, r5
 800498c:	4638      	mov	r0, r7
 800498e:	f7ff ff6d 	bl	800486c <__ssputs_r>
 8004992:	3001      	adds	r0, #1
 8004994:	f000 80aa 	beq.w	8004aec <_svfiprintf_r+0x1c8>
 8004998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800499a:	445a      	add	r2, fp
 800499c:	9209      	str	r2, [sp, #36]	; 0x24
 800499e:	f89a 3000 	ldrb.w	r3, [sl]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80a2 	beq.w	8004aec <_svfiprintf_r+0x1c8>
 80049a8:	2300      	movs	r3, #0
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295
 80049ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049b2:	f10a 0a01 	add.w	sl, sl, #1
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	9307      	str	r3, [sp, #28]
 80049ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049be:	931a      	str	r3, [sp, #104]	; 0x68
 80049c0:	4654      	mov	r4, sl
 80049c2:	2205      	movs	r2, #5
 80049c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c8:	4851      	ldr	r0, [pc, #324]	; (8004b10 <_svfiprintf_r+0x1ec>)
 80049ca:	f7fb fc21 	bl	8000210 <memchr>
 80049ce:	9a04      	ldr	r2, [sp, #16]
 80049d0:	b9d8      	cbnz	r0, 8004a0a <_svfiprintf_r+0xe6>
 80049d2:	06d0      	lsls	r0, r2, #27
 80049d4:	bf44      	itt	mi
 80049d6:	2320      	movmi	r3, #32
 80049d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049dc:	0711      	lsls	r1, r2, #28
 80049de:	bf44      	itt	mi
 80049e0:	232b      	movmi	r3, #43	; 0x2b
 80049e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ea:	2b2a      	cmp	r3, #42	; 0x2a
 80049ec:	d015      	beq.n	8004a1a <_svfiprintf_r+0xf6>
 80049ee:	9a07      	ldr	r2, [sp, #28]
 80049f0:	4654      	mov	r4, sl
 80049f2:	2000      	movs	r0, #0
 80049f4:	f04f 0c0a 	mov.w	ip, #10
 80049f8:	4621      	mov	r1, r4
 80049fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fe:	3b30      	subs	r3, #48	; 0x30
 8004a00:	2b09      	cmp	r3, #9
 8004a02:	d94e      	bls.n	8004aa2 <_svfiprintf_r+0x17e>
 8004a04:	b1b0      	cbz	r0, 8004a34 <_svfiprintf_r+0x110>
 8004a06:	9207      	str	r2, [sp, #28]
 8004a08:	e014      	b.n	8004a34 <_svfiprintf_r+0x110>
 8004a0a:	eba0 0308 	sub.w	r3, r0, r8
 8004a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	9304      	str	r3, [sp, #16]
 8004a16:	46a2      	mov	sl, r4
 8004a18:	e7d2      	b.n	80049c0 <_svfiprintf_r+0x9c>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	1d19      	adds	r1, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	9103      	str	r1, [sp, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfbb      	ittet	lt
 8004a26:	425b      	neglt	r3, r3
 8004a28:	f042 0202 	orrlt.w	r2, r2, #2
 8004a2c:	9307      	strge	r3, [sp, #28]
 8004a2e:	9307      	strlt	r3, [sp, #28]
 8004a30:	bfb8      	it	lt
 8004a32:	9204      	strlt	r2, [sp, #16]
 8004a34:	7823      	ldrb	r3, [r4, #0]
 8004a36:	2b2e      	cmp	r3, #46	; 0x2e
 8004a38:	d10c      	bne.n	8004a54 <_svfiprintf_r+0x130>
 8004a3a:	7863      	ldrb	r3, [r4, #1]
 8004a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3e:	d135      	bne.n	8004aac <_svfiprintf_r+0x188>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	9203      	str	r2, [sp, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bfb8      	it	lt
 8004a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a50:	3402      	adds	r4, #2
 8004a52:	9305      	str	r3, [sp, #20]
 8004a54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b20 <_svfiprintf_r+0x1fc>
 8004a58:	7821      	ldrb	r1, [r4, #0]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	f7fb fbd7 	bl	8000210 <memchr>
 8004a62:	b140      	cbz	r0, 8004a76 <_svfiprintf_r+0x152>
 8004a64:	2340      	movs	r3, #64	; 0x40
 8004a66:	eba0 000a 	sub.w	r0, r0, sl
 8004a6a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a6e:	9b04      	ldr	r3, [sp, #16]
 8004a70:	4303      	orrs	r3, r0
 8004a72:	3401      	adds	r4, #1
 8004a74:	9304      	str	r3, [sp, #16]
 8004a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7a:	4826      	ldr	r0, [pc, #152]	; (8004b14 <_svfiprintf_r+0x1f0>)
 8004a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a80:	2206      	movs	r2, #6
 8004a82:	f7fb fbc5 	bl	8000210 <memchr>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d038      	beq.n	8004afc <_svfiprintf_r+0x1d8>
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <_svfiprintf_r+0x1f4>)
 8004a8c:	bb1b      	cbnz	r3, 8004ad6 <_svfiprintf_r+0x1b2>
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	3307      	adds	r3, #7
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	3308      	adds	r3, #8
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9c:	4433      	add	r3, r6
 8004a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa0:	e767      	b.n	8004972 <_svfiprintf_r+0x4e>
 8004aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	e7a5      	b.n	80049f8 <_svfiprintf_r+0xd4>
 8004aac:	2300      	movs	r3, #0
 8004aae:	3401      	adds	r4, #1
 8004ab0:	9305      	str	r3, [sp, #20]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f04f 0c0a 	mov.w	ip, #10
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004abe:	3a30      	subs	r2, #48	; 0x30
 8004ac0:	2a09      	cmp	r2, #9
 8004ac2:	d903      	bls.n	8004acc <_svfiprintf_r+0x1a8>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0c5      	beq.n	8004a54 <_svfiprintf_r+0x130>
 8004ac8:	9105      	str	r1, [sp, #20]
 8004aca:	e7c3      	b.n	8004a54 <_svfiprintf_r+0x130>
 8004acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e7f0      	b.n	8004ab8 <_svfiprintf_r+0x194>
 8004ad6:	ab03      	add	r3, sp, #12
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	462a      	mov	r2, r5
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <_svfiprintf_r+0x1f8>)
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f3af 8000 	nop.w
 8004ae6:	1c42      	adds	r2, r0, #1
 8004ae8:	4606      	mov	r6, r0
 8004aea:	d1d6      	bne.n	8004a9a <_svfiprintf_r+0x176>
 8004aec:	89ab      	ldrh	r3, [r5, #12]
 8004aee:	065b      	lsls	r3, r3, #25
 8004af0:	f53f af2c 	bmi.w	800494c <_svfiprintf_r+0x28>
 8004af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004af6:	b01d      	add	sp, #116	; 0x74
 8004af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afc:	ab03      	add	r3, sp, #12
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	462a      	mov	r2, r5
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <_svfiprintf_r+0x1f8>)
 8004b04:	a904      	add	r1, sp, #16
 8004b06:	4638      	mov	r0, r7
 8004b08:	f000 f87a 	bl	8004c00 <_printf_i>
 8004b0c:	e7eb      	b.n	8004ae6 <_svfiprintf_r+0x1c2>
 8004b0e:	bf00      	nop
 8004b10:	08005168 	.word	0x08005168
 8004b14:	08005172 	.word	0x08005172
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	0800486d 	.word	0x0800486d
 8004b20:	0800516e 	.word	0x0800516e

08004b24 <_printf_common>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	4616      	mov	r6, r2
 8004b2a:	4699      	mov	r9, r3
 8004b2c:	688a      	ldr	r2, [r1, #8]
 8004b2e:	690b      	ldr	r3, [r1, #16]
 8004b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b34:	4293      	cmp	r3, r2
 8004b36:	bfb8      	it	lt
 8004b38:	4613      	movlt	r3, r2
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b40:	4607      	mov	r7, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	b10a      	cbz	r2, 8004b4a <_printf_common+0x26>
 8004b46:	3301      	adds	r3, #1
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	0699      	lsls	r1, r3, #26
 8004b4e:	bf42      	ittt	mi
 8004b50:	6833      	ldrmi	r3, [r6, #0]
 8004b52:	3302      	addmi	r3, #2
 8004b54:	6033      	strmi	r3, [r6, #0]
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	f015 0506 	ands.w	r5, r5, #6
 8004b5c:	d106      	bne.n	8004b6c <_printf_common+0x48>
 8004b5e:	f104 0a19 	add.w	sl, r4, #25
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	6832      	ldr	r2, [r6, #0]
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dc26      	bgt.n	8004bba <_printf_common+0x96>
 8004b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b70:	1e13      	subs	r3, r2, #0
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	bf18      	it	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	0692      	lsls	r2, r2, #26
 8004b7a:	d42b      	bmi.n	8004bd4 <_printf_common+0xb0>
 8004b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b80:	4649      	mov	r1, r9
 8004b82:	4638      	mov	r0, r7
 8004b84:	47c0      	blx	r8
 8004b86:	3001      	adds	r0, #1
 8004b88:	d01e      	beq.n	8004bc8 <_printf_common+0xa4>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	68e5      	ldr	r5, [r4, #12]
 8004b8e:	6832      	ldr	r2, [r6, #0]
 8004b90:	f003 0306 	and.w	r3, r3, #6
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	bf08      	it	eq
 8004b98:	1aad      	subeq	r5, r5, r2
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	6922      	ldr	r2, [r4, #16]
 8004b9e:	bf0c      	ite	eq
 8004ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba4:	2500      	movne	r5, #0
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bfc4      	itt	gt
 8004baa:	1a9b      	subgt	r3, r3, r2
 8004bac:	18ed      	addgt	r5, r5, r3
 8004bae:	2600      	movs	r6, #0
 8004bb0:	341a      	adds	r4, #26
 8004bb2:	42b5      	cmp	r5, r6
 8004bb4:	d11a      	bne.n	8004bec <_printf_common+0xc8>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e008      	b.n	8004bcc <_printf_common+0xa8>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	47c0      	blx	r8
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d103      	bne.n	8004bd0 <_printf_common+0xac>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd0:	3501      	adds	r5, #1
 8004bd2:	e7c6      	b.n	8004b62 <_printf_common+0x3e>
 8004bd4:	18e1      	adds	r1, r4, r3
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	2030      	movs	r0, #48	; 0x30
 8004bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bde:	4422      	add	r2, r4
 8004be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004be8:	3302      	adds	r3, #2
 8004bea:	e7c7      	b.n	8004b7c <_printf_common+0x58>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4622      	mov	r2, r4
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d0e6      	beq.n	8004bc8 <_printf_common+0xa4>
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7d9      	b.n	8004bb2 <_printf_common+0x8e>
	...

08004c00 <_printf_i>:
 8004c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c04:	7e0f      	ldrb	r7, [r1, #24]
 8004c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c08:	2f78      	cmp	r7, #120	; 0x78
 8004c0a:	4691      	mov	r9, r2
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	469a      	mov	sl, r3
 8004c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c16:	d807      	bhi.n	8004c28 <_printf_i+0x28>
 8004c18:	2f62      	cmp	r7, #98	; 0x62
 8004c1a:	d80a      	bhi.n	8004c32 <_printf_i+0x32>
 8004c1c:	2f00      	cmp	r7, #0
 8004c1e:	f000 80d8 	beq.w	8004dd2 <_printf_i+0x1d2>
 8004c22:	2f58      	cmp	r7, #88	; 0x58
 8004c24:	f000 80a3 	beq.w	8004d6e <_printf_i+0x16e>
 8004c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c30:	e03a      	b.n	8004ca8 <_printf_i+0xa8>
 8004c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c36:	2b15      	cmp	r3, #21
 8004c38:	d8f6      	bhi.n	8004c28 <_printf_i+0x28>
 8004c3a:	a101      	add	r1, pc, #4	; (adr r1, 8004c40 <_printf_i+0x40>)
 8004c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004c29 	.word	0x08004c29
 8004c4c:	08004c29 	.word	0x08004c29
 8004c50:	08004c29 	.word	0x08004c29
 8004c54:	08004c29 	.word	0x08004c29
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004c29 	.word	0x08004c29
 8004c60:	08004c29 	.word	0x08004c29
 8004c64:	08004c29 	.word	0x08004c29
 8004c68:	08004c29 	.word	0x08004c29
 8004c6c:	08004db9 	.word	0x08004db9
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004d9b 	.word	0x08004d9b
 8004c78:	08004c29 	.word	0x08004c29
 8004c7c:	08004c29 	.word	0x08004c29
 8004c80:	08004ddb 	.word	0x08004ddb
 8004c84:	08004c29 	.word	0x08004c29
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c29 	.word	0x08004c29
 8004c90:	08004c29 	.word	0x08004c29
 8004c94:	08004da3 	.word	0x08004da3
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	602a      	str	r2, [r5, #0]
 8004ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0a3      	b.n	8004df4 <_printf_i+0x1f4>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	6829      	ldr	r1, [r5, #0]
 8004cb0:	0606      	lsls	r6, r0, #24
 8004cb2:	f101 0304 	add.w	r3, r1, #4
 8004cb6:	d50a      	bpl.n	8004cce <_printf_i+0xce>
 8004cb8:	680e      	ldr	r6, [r1, #0]
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	2e00      	cmp	r6, #0
 8004cbe:	da03      	bge.n	8004cc8 <_printf_i+0xc8>
 8004cc0:	232d      	movs	r3, #45	; 0x2d
 8004cc2:	4276      	negs	r6, r6
 8004cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc8:	485e      	ldr	r0, [pc, #376]	; (8004e44 <_printf_i+0x244>)
 8004cca:	230a      	movs	r3, #10
 8004ccc:	e019      	b.n	8004d02 <_printf_i+0x102>
 8004cce:	680e      	ldr	r6, [r1, #0]
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cd6:	bf18      	it	ne
 8004cd8:	b236      	sxthne	r6, r6
 8004cda:	e7ef      	b.n	8004cbc <_printf_i+0xbc>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	1d19      	adds	r1, r3, #4
 8004ce2:	6029      	str	r1, [r5, #0]
 8004ce4:	0601      	lsls	r1, r0, #24
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0xec>
 8004ce8:	681e      	ldr	r6, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <_printf_i+0xf2>
 8004cec:	0646      	lsls	r6, r0, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0xe8>
 8004cf0:	881e      	ldrh	r6, [r3, #0]
 8004cf2:	4854      	ldr	r0, [pc, #336]	; (8004e44 <_printf_i+0x244>)
 8004cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2308      	moveq	r3, #8
 8004cfa:	230a      	movne	r3, #10
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d02:	6865      	ldr	r5, [r4, #4]
 8004d04:	60a5      	str	r5, [r4, #8]
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	bfa2      	ittt	ge
 8004d0a:	6821      	ldrge	r1, [r4, #0]
 8004d0c:	f021 0104 	bicge.w	r1, r1, #4
 8004d10:	6021      	strge	r1, [r4, #0]
 8004d12:	b90e      	cbnz	r6, 8004d18 <_printf_i+0x118>
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	d04d      	beq.n	8004db4 <_printf_i+0x1b4>
 8004d18:	4615      	mov	r5, r2
 8004d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d22:	5dc7      	ldrb	r7, [r0, r7]
 8004d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d28:	4637      	mov	r7, r6
 8004d2a:	42bb      	cmp	r3, r7
 8004d2c:	460e      	mov	r6, r1
 8004d2e:	d9f4      	bls.n	8004d1a <_printf_i+0x11a>
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d10b      	bne.n	8004d4c <_printf_i+0x14c>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	07de      	lsls	r6, r3, #31
 8004d38:	d508      	bpl.n	8004d4c <_printf_i+0x14c>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	6861      	ldr	r1, [r4, #4]
 8004d3e:	4299      	cmp	r1, r3
 8004d40:	bfde      	ittt	le
 8004d42:	2330      	movle	r3, #48	; 0x30
 8004d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d4c:	1b52      	subs	r2, r2, r5
 8004d4e:	6122      	str	r2, [r4, #16]
 8004d50:	f8cd a000 	str.w	sl, [sp]
 8004d54:	464b      	mov	r3, r9
 8004d56:	aa03      	add	r2, sp, #12
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f7ff fee2 	bl	8004b24 <_printf_common>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d14c      	bne.n	8004dfe <_printf_i+0x1fe>
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	b004      	add	sp, #16
 8004d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6e:	4835      	ldr	r0, [pc, #212]	; (8004e44 <_printf_i+0x244>)
 8004d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d74:	6829      	ldr	r1, [r5, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d7c:	6029      	str	r1, [r5, #0]
 8004d7e:	061d      	lsls	r5, r3, #24
 8004d80:	d514      	bpl.n	8004dac <_printf_i+0x1ac>
 8004d82:	07df      	lsls	r7, r3, #31
 8004d84:	bf44      	itt	mi
 8004d86:	f043 0320 	orrmi.w	r3, r3, #32
 8004d8a:	6023      	strmi	r3, [r4, #0]
 8004d8c:	b91e      	cbnz	r6, 8004d96 <_printf_i+0x196>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f023 0320 	bic.w	r3, r3, #32
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	2310      	movs	r3, #16
 8004d98:	e7b0      	b.n	8004cfc <_printf_i+0xfc>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	f043 0320 	orr.w	r3, r3, #32
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	2378      	movs	r3, #120	; 0x78
 8004da4:	4828      	ldr	r0, [pc, #160]	; (8004e48 <_printf_i+0x248>)
 8004da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004daa:	e7e3      	b.n	8004d74 <_printf_i+0x174>
 8004dac:	0659      	lsls	r1, r3, #25
 8004dae:	bf48      	it	mi
 8004db0:	b2b6      	uxthmi	r6, r6
 8004db2:	e7e6      	b.n	8004d82 <_printf_i+0x182>
 8004db4:	4615      	mov	r5, r2
 8004db6:	e7bb      	b.n	8004d30 <_printf_i+0x130>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	6826      	ldr	r6, [r4, #0]
 8004dbc:	6961      	ldr	r1, [r4, #20]
 8004dbe:	1d18      	adds	r0, r3, #4
 8004dc0:	6028      	str	r0, [r5, #0]
 8004dc2:	0635      	lsls	r5, r6, #24
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0x1cc>
 8004dc8:	6019      	str	r1, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <_printf_i+0x1d2>
 8004dcc:	0670      	lsls	r0, r6, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0x1c8>
 8004dd0:	8019      	strh	r1, [r3, #0]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	4615      	mov	r5, r2
 8004dd8:	e7ba      	b.n	8004d50 <_printf_i+0x150>
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	1d1a      	adds	r2, r3, #4
 8004dde:	602a      	str	r2, [r5, #0]
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	2100      	movs	r1, #0
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7fb fa12 	bl	8000210 <memchr>
 8004dec:	b108      	cbz	r0, 8004df2 <_printf_i+0x1f2>
 8004dee:	1b40      	subs	r0, r0, r5
 8004df0:	6060      	str	r0, [r4, #4]
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	2300      	movs	r3, #0
 8004df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dfc:	e7a8      	b.n	8004d50 <_printf_i+0x150>
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	462a      	mov	r2, r5
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	47d0      	blx	sl
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d0ab      	beq.n	8004d64 <_printf_i+0x164>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	079b      	lsls	r3, r3, #30
 8004e10:	d413      	bmi.n	8004e3a <_printf_i+0x23a>
 8004e12:	68e0      	ldr	r0, [r4, #12]
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	4298      	cmp	r0, r3
 8004e18:	bfb8      	it	lt
 8004e1a:	4618      	movlt	r0, r3
 8004e1c:	e7a4      	b.n	8004d68 <_printf_i+0x168>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4632      	mov	r2, r6
 8004e22:	4649      	mov	r1, r9
 8004e24:	4640      	mov	r0, r8
 8004e26:	47d0      	blx	sl
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d09b      	beq.n	8004d64 <_printf_i+0x164>
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	9903      	ldr	r1, [sp, #12]
 8004e32:	1a5b      	subs	r3, r3, r1
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dcf2      	bgt.n	8004e1e <_printf_i+0x21e>
 8004e38:	e7eb      	b.n	8004e12 <_printf_i+0x212>
 8004e3a:	2500      	movs	r5, #0
 8004e3c:	f104 0619 	add.w	r6, r4, #25
 8004e40:	e7f5      	b.n	8004e2e <_printf_i+0x22e>
 8004e42:	bf00      	nop
 8004e44:	08005179 	.word	0x08005179
 8004e48:	0800518a 	.word	0x0800518a

08004e4c <memcpy>:
 8004e4c:	440a      	add	r2, r1
 8004e4e:	4291      	cmp	r1, r2
 8004e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e54:	d100      	bne.n	8004e58 <memcpy+0xc>
 8004e56:	4770      	bx	lr
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e62:	4291      	cmp	r1, r2
 8004e64:	d1f9      	bne.n	8004e5a <memcpy+0xe>
 8004e66:	bd10      	pop	{r4, pc}

08004e68 <memmove>:
 8004e68:	4288      	cmp	r0, r1
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	eb01 0402 	add.w	r4, r1, r2
 8004e70:	d902      	bls.n	8004e78 <memmove+0x10>
 8004e72:	4284      	cmp	r4, r0
 8004e74:	4623      	mov	r3, r4
 8004e76:	d807      	bhi.n	8004e88 <memmove+0x20>
 8004e78:	1e43      	subs	r3, r0, #1
 8004e7a:	42a1      	cmp	r1, r4
 8004e7c:	d008      	beq.n	8004e90 <memmove+0x28>
 8004e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e86:	e7f8      	b.n	8004e7a <memmove+0x12>
 8004e88:	4402      	add	r2, r0
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	428a      	cmp	r2, r1
 8004e8e:	d100      	bne.n	8004e92 <memmove+0x2a>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e9a:	e7f7      	b.n	8004e8c <memmove+0x24>

08004e9c <_free_r>:
 8004e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	d044      	beq.n	8004f2c <_free_r+0x90>
 8004ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea6:	9001      	str	r0, [sp, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8004eae:	bfb8      	it	lt
 8004eb0:	18e4      	addlt	r4, r4, r3
 8004eb2:	f000 f913 	bl	80050dc <__malloc_lock>
 8004eb6:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <_free_r+0x94>)
 8004eb8:	9801      	ldr	r0, [sp, #4]
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	b933      	cbnz	r3, 8004ecc <_free_r+0x30>
 8004ebe:	6063      	str	r3, [r4, #4]
 8004ec0:	6014      	str	r4, [r2, #0]
 8004ec2:	b003      	add	sp, #12
 8004ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ec8:	f000 b90e 	b.w	80050e8 <__malloc_unlock>
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d908      	bls.n	8004ee2 <_free_r+0x46>
 8004ed0:	6825      	ldr	r5, [r4, #0]
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf01      	itttt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	1949      	addeq	r1, r1, r5
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	e7ed      	b.n	8004ebe <_free_r+0x22>
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	b10b      	cbz	r3, 8004eec <_free_r+0x50>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d9fa      	bls.n	8004ee2 <_free_r+0x46>
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	1855      	adds	r5, r2, r1
 8004ef0:	42a5      	cmp	r5, r4
 8004ef2:	d10b      	bne.n	8004f0c <_free_r+0x70>
 8004ef4:	6824      	ldr	r4, [r4, #0]
 8004ef6:	4421      	add	r1, r4
 8004ef8:	1854      	adds	r4, r2, r1
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	6011      	str	r1, [r2, #0]
 8004efe:	d1e0      	bne.n	8004ec2 <_free_r+0x26>
 8004f00:	681c      	ldr	r4, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	6053      	str	r3, [r2, #4]
 8004f06:	4421      	add	r1, r4
 8004f08:	6011      	str	r1, [r2, #0]
 8004f0a:	e7da      	b.n	8004ec2 <_free_r+0x26>
 8004f0c:	d902      	bls.n	8004f14 <_free_r+0x78>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	6003      	str	r3, [r0, #0]
 8004f12:	e7d6      	b.n	8004ec2 <_free_r+0x26>
 8004f14:	6825      	ldr	r5, [r4, #0]
 8004f16:	1961      	adds	r1, r4, r5
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	bf04      	itt	eq
 8004f1c:	6819      	ldreq	r1, [r3, #0]
 8004f1e:	685b      	ldreq	r3, [r3, #4]
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	bf04      	itt	eq
 8004f24:	1949      	addeq	r1, r1, r5
 8004f26:	6021      	streq	r1, [r4, #0]
 8004f28:	6054      	str	r4, [r2, #4]
 8004f2a:	e7ca      	b.n	8004ec2 <_free_r+0x26>
 8004f2c:	b003      	add	sp, #12
 8004f2e:	bd30      	pop	{r4, r5, pc}
 8004f30:	200003e8 	.word	0x200003e8

08004f34 <sbrk_aligned>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4e0e      	ldr	r6, [pc, #56]	; (8004f70 <sbrk_aligned+0x3c>)
 8004f38:	460c      	mov	r4, r1
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	b911      	cbnz	r1, 8004f46 <sbrk_aligned+0x12>
 8004f40:	f000 f8bc 	bl	80050bc <_sbrk_r>
 8004f44:	6030      	str	r0, [r6, #0]
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f8b7 	bl	80050bc <_sbrk_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d00a      	beq.n	8004f68 <sbrk_aligned+0x34>
 8004f52:	1cc4      	adds	r4, r0, #3
 8004f54:	f024 0403 	bic.w	r4, r4, #3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d007      	beq.n	8004f6c <sbrk_aligned+0x38>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 f8ac 	bl	80050bc <_sbrk_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d101      	bne.n	8004f6c <sbrk_aligned+0x38>
 8004f68:	f04f 34ff 	mov.w	r4, #4294967295
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	200003ec 	.word	0x200003ec

08004f74 <_malloc_r>:
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	1ccd      	adds	r5, r1, #3
 8004f7a:	f025 0503 	bic.w	r5, r5, #3
 8004f7e:	3508      	adds	r5, #8
 8004f80:	2d0c      	cmp	r5, #12
 8004f82:	bf38      	it	cc
 8004f84:	250c      	movcc	r5, #12
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	4607      	mov	r7, r0
 8004f8a:	db01      	blt.n	8004f90 <_malloc_r+0x1c>
 8004f8c:	42a9      	cmp	r1, r5
 8004f8e:	d905      	bls.n	8004f9c <_malloc_r+0x28>
 8004f90:	230c      	movs	r3, #12
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	2600      	movs	r6, #0
 8004f96:	4630      	mov	r0, r6
 8004f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9c:	4e2e      	ldr	r6, [pc, #184]	; (8005058 <_malloc_r+0xe4>)
 8004f9e:	f000 f89d 	bl	80050dc <__malloc_lock>
 8004fa2:	6833      	ldr	r3, [r6, #0]
 8004fa4:	461c      	mov	r4, r3
 8004fa6:	bb34      	cbnz	r4, 8004ff6 <_malloc_r+0x82>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4638      	mov	r0, r7
 8004fac:	f7ff ffc2 	bl	8004f34 <sbrk_aligned>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	d14d      	bne.n	8005052 <_malloc_r+0xde>
 8004fb6:	6834      	ldr	r4, [r6, #0]
 8004fb8:	4626      	mov	r6, r4
 8004fba:	2e00      	cmp	r6, #0
 8004fbc:	d140      	bne.n	8005040 <_malloc_r+0xcc>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	eb04 0803 	add.w	r8, r4, r3
 8004fc8:	f000 f878 	bl	80050bc <_sbrk_r>
 8004fcc:	4580      	cmp	r8, r0
 8004fce:	d13a      	bne.n	8005046 <_malloc_r+0xd2>
 8004fd0:	6821      	ldr	r1, [r4, #0]
 8004fd2:	3503      	adds	r5, #3
 8004fd4:	1a6d      	subs	r5, r5, r1
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f7ff ffa5 	bl	8004f34 <sbrk_aligned>
 8004fea:	3001      	adds	r0, #1
 8004fec:	d02b      	beq.n	8005046 <_malloc_r+0xd2>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	442b      	add	r3, r5
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	e00e      	b.n	8005014 <_malloc_r+0xa0>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	1b52      	subs	r2, r2, r5
 8004ffa:	d41e      	bmi.n	800503a <_malloc_r+0xc6>
 8004ffc:	2a0b      	cmp	r2, #11
 8004ffe:	d916      	bls.n	800502e <_malloc_r+0xba>
 8005000:	1961      	adds	r1, r4, r5
 8005002:	42a3      	cmp	r3, r4
 8005004:	6025      	str	r5, [r4, #0]
 8005006:	bf18      	it	ne
 8005008:	6059      	strne	r1, [r3, #4]
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	bf08      	it	eq
 800500e:	6031      	streq	r1, [r6, #0]
 8005010:	5162      	str	r2, [r4, r5]
 8005012:	604b      	str	r3, [r1, #4]
 8005014:	4638      	mov	r0, r7
 8005016:	f104 060b 	add.w	r6, r4, #11
 800501a:	f000 f865 	bl	80050e8 <__malloc_unlock>
 800501e:	f026 0607 	bic.w	r6, r6, #7
 8005022:	1d23      	adds	r3, r4, #4
 8005024:	1af2      	subs	r2, r6, r3
 8005026:	d0b6      	beq.n	8004f96 <_malloc_r+0x22>
 8005028:	1b9b      	subs	r3, r3, r6
 800502a:	50a3      	str	r3, [r4, r2]
 800502c:	e7b3      	b.n	8004f96 <_malloc_r+0x22>
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	42a3      	cmp	r3, r4
 8005032:	bf0c      	ite	eq
 8005034:	6032      	streq	r2, [r6, #0]
 8005036:	605a      	strne	r2, [r3, #4]
 8005038:	e7ec      	b.n	8005014 <_malloc_r+0xa0>
 800503a:	4623      	mov	r3, r4
 800503c:	6864      	ldr	r4, [r4, #4]
 800503e:	e7b2      	b.n	8004fa6 <_malloc_r+0x32>
 8005040:	4634      	mov	r4, r6
 8005042:	6876      	ldr	r6, [r6, #4]
 8005044:	e7b9      	b.n	8004fba <_malloc_r+0x46>
 8005046:	230c      	movs	r3, #12
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4638      	mov	r0, r7
 800504c:	f000 f84c 	bl	80050e8 <__malloc_unlock>
 8005050:	e7a1      	b.n	8004f96 <_malloc_r+0x22>
 8005052:	6025      	str	r5, [r4, #0]
 8005054:	e7de      	b.n	8005014 <_malloc_r+0xa0>
 8005056:	bf00      	nop
 8005058:	200003e8 	.word	0x200003e8

0800505c <_realloc_r>:
 800505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005060:	4680      	mov	r8, r0
 8005062:	4614      	mov	r4, r2
 8005064:	460e      	mov	r6, r1
 8005066:	b921      	cbnz	r1, 8005072 <_realloc_r+0x16>
 8005068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	4611      	mov	r1, r2
 800506e:	f7ff bf81 	b.w	8004f74 <_malloc_r>
 8005072:	b92a      	cbnz	r2, 8005080 <_realloc_r+0x24>
 8005074:	f7ff ff12 	bl	8004e9c <_free_r>
 8005078:	4625      	mov	r5, r4
 800507a:	4628      	mov	r0, r5
 800507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005080:	f000 f838 	bl	80050f4 <_malloc_usable_size_r>
 8005084:	4284      	cmp	r4, r0
 8005086:	4607      	mov	r7, r0
 8005088:	d802      	bhi.n	8005090 <_realloc_r+0x34>
 800508a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800508e:	d812      	bhi.n	80050b6 <_realloc_r+0x5a>
 8005090:	4621      	mov	r1, r4
 8005092:	4640      	mov	r0, r8
 8005094:	f7ff ff6e 	bl	8004f74 <_malloc_r>
 8005098:	4605      	mov	r5, r0
 800509a:	2800      	cmp	r0, #0
 800509c:	d0ed      	beq.n	800507a <_realloc_r+0x1e>
 800509e:	42bc      	cmp	r4, r7
 80050a0:	4622      	mov	r2, r4
 80050a2:	4631      	mov	r1, r6
 80050a4:	bf28      	it	cs
 80050a6:	463a      	movcs	r2, r7
 80050a8:	f7ff fed0 	bl	8004e4c <memcpy>
 80050ac:	4631      	mov	r1, r6
 80050ae:	4640      	mov	r0, r8
 80050b0:	f7ff fef4 	bl	8004e9c <_free_r>
 80050b4:	e7e1      	b.n	800507a <_realloc_r+0x1e>
 80050b6:	4635      	mov	r5, r6
 80050b8:	e7df      	b.n	800507a <_realloc_r+0x1e>
	...

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_sbrk_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fc fb6e 	bl	80017a8 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200003f0 	.word	0x200003f0

080050dc <__malloc_lock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__malloc_lock+0x8>)
 80050de:	f000 b811 	b.w	8005104 <__retarget_lock_acquire_recursive>
 80050e2:	bf00      	nop
 80050e4:	200003f4 	.word	0x200003f4

080050e8 <__malloc_unlock>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__malloc_unlock+0x8>)
 80050ea:	f000 b80c 	b.w	8005106 <__retarget_lock_release_recursive>
 80050ee:	bf00      	nop
 80050f0:	200003f4 	.word	0x200003f4

080050f4 <_malloc_usable_size_r>:
 80050f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f8:	1f18      	subs	r0, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bfbc      	itt	lt
 80050fe:	580b      	ldrlt	r3, [r1, r0]
 8005100:	18c0      	addlt	r0, r0, r3
 8005102:	4770      	bx	lr

08005104 <__retarget_lock_acquire_recursive>:
 8005104:	4770      	bx	lr

08005106 <__retarget_lock_release_recursive>:
 8005106:	4770      	bx	lr

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
